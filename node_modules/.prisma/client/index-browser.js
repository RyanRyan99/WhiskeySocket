
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ChatScalarFieldEnum = {
  pkId: 'pkId',
  sessionId: 'sessionId',
  archived: 'archived',
  contactPrimaryIdentityKey: 'contactPrimaryIdentityKey',
  conversationTimestamp: 'conversationTimestamp',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  description: 'description',
  disappearingMode: 'disappearingMode',
  displayName: 'displayName',
  endOfHistoryTransfer: 'endOfHistoryTransfer',
  endOfHistoryTransferType: 'endOfHistoryTransferType',
  ephemeralExpiration: 'ephemeralExpiration',
  ephemeralSettingTimestamp: 'ephemeralSettingTimestamp',
  id: 'id',
  isDefaultSubgroup: 'isDefaultSubgroup',
  isParentGroup: 'isParentGroup',
  lastMsgTimestamp: 'lastMsgTimestamp',
  lidJid: 'lidJid',
  markedAsUnread: 'markedAsUnread',
  mediaVisibility: 'mediaVisibility',
  messages: 'messages',
  muteEndTime: 'muteEndTime',
  name: 'name',
  newJid: 'newJid',
  notSpam: 'notSpam',
  oldJid: 'oldJid',
  pHash: 'pHash',
  parentGroupId: 'parentGroupId',
  participant: 'participant',
  pinned: 'pinned',
  pnJid: 'pnJid',
  pnhDuplicateLidThread: 'pnhDuplicateLidThread',
  readOnly: 'readOnly',
  shareOwnPn: 'shareOwnPn',
  support: 'support',
  suspended: 'suspended',
  tcToken: 'tcToken',
  tcTokenSenderTimestamp: 'tcTokenSenderTimestamp',
  tcTokenTimestamp: 'tcTokenTimestamp',
  terminated: 'terminated',
  unreadCount: 'unreadCount',
  unreadMentionCount: 'unreadMentionCount',
  wallpaper: 'wallpaper',
  lastMessageRecvTimestamp: 'lastMessageRecvTimestamp'
};

exports.Prisma.ContactScalarFieldEnum = {
  pkId: 'pkId',
  sessionId: 'sessionId',
  id: 'id',
  name: 'name',
  notify: 'notify',
  verifiedName: 'verifiedName',
  imgUrl: 'imgUrl',
  status: 'status'
};

exports.Prisma.GroupMetadataScalarFieldEnum = {
  pkId: 'pkId',
  sessionId: 'sessionId',
  id: 'id',
  owner: 'owner',
  subject: 'subject',
  subjectOwner: 'subjectOwner',
  subjectTime: 'subjectTime',
  creation: 'creation',
  desc: 'desc',
  descOwner: 'descOwner',
  descId: 'descId',
  restrict: 'restrict',
  announce: 'announce',
  size: 'size',
  participants: 'participants',
  ephemeralDuration: 'ephemeralDuration',
  inviteCode: 'inviteCode'
};

exports.Prisma.MessageScalarFieldEnum = {
  pkId: 'pkId',
  sessionId: 'sessionId',
  remoteJid: 'remoteJid',
  id: 'id',
  agentId: 'agentId',
  bizPrivacyStatus: 'bizPrivacyStatus',
  broadcast: 'broadcast',
  clearMedia: 'clearMedia',
  duration: 'duration',
  ephemeralDuration: 'ephemeralDuration',
  ephemeralOffToOn: 'ephemeralOffToOn',
  ephemeralOutOfSync: 'ephemeralOutOfSync',
  ephemeralStartTimestamp: 'ephemeralStartTimestamp',
  finalLiveLocation: 'finalLiveLocation',
  futureproofData: 'futureproofData',
  ignore: 'ignore',
  keepInChat: 'keepInChat',
  key: 'key',
  labels: 'labels',
  mediaCiphertextSha256: 'mediaCiphertextSha256',
  mediaData: 'mediaData',
  message: 'message',
  messageC2STimestamp: 'messageC2STimestamp',
  messageSecret: 'messageSecret',
  messageStubParameters: 'messageStubParameters',
  messageStubType: 'messageStubType',
  messageTimestamp: 'messageTimestamp',
  multicast: 'multicast',
  originalSelfAuthorUserJidString: 'originalSelfAuthorUserJidString',
  participant: 'participant',
  paymentInfo: 'paymentInfo',
  photoChange: 'photoChange',
  pollAdditionalMetadata: 'pollAdditionalMetadata',
  pollUpdates: 'pollUpdates',
  pushName: 'pushName',
  quotedPaymentInfo: 'quotedPaymentInfo',
  quotedStickerData: 'quotedStickerData',
  reactions: 'reactions',
  revokeMessageTimestamp: 'revokeMessageTimestamp',
  starred: 'starred',
  status: 'status',
  statusAlreadyViewed: 'statusAlreadyViewed',
  statusPsa: 'statusPsa',
  urlNumber: 'urlNumber',
  urlText: 'urlText',
  userReceipt: 'userReceipt',
  verifiedBizName: 'verifiedBizName'
};

exports.Prisma.SessionScalarFieldEnum = {
  pkId: 'pkId',
  sessionId: 'sessionId',
  id: 'id',
  data: 'data'
};

exports.Prisma.ChatIncomingScalarFieldEnum = {
  pkId: 'pkId',
  id: 'id',
  sessionId: 'sessionId',
  remoteJid: 'remoteJid',
  message: 'message',
  pushName: 'pushName',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Chat: 'Chat',
  Contact: 'Contact',
  GroupMetadata: 'GroupMetadata',
  Message: 'Message',
  Session: 'Session',
  ChatIncoming: 'ChatIncoming'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
