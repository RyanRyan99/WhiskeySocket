
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type ChatPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Chat"
  objects: {}
  scalars: $Extensions.GetResult<{
    pkId: number
    sessionId: string
    archived: boolean | null
    contactPrimaryIdentityKey: Buffer | null
    conversationTimestamp: bigint | null
    createdAt: bigint | null
    createdBy: string | null
    description: string | null
    disappearingMode: Prisma.JsonValue | null
    displayName: string | null
    endOfHistoryTransfer: boolean | null
    endOfHistoryTransferType: number | null
    ephemeralExpiration: number | null
    ephemeralSettingTimestamp: bigint | null
    id: string
    isDefaultSubgroup: boolean | null
    isParentGroup: boolean | null
    lastMsgTimestamp: bigint | null
    lidJid: string | null
    markedAsUnread: boolean | null
    mediaVisibility: number | null
    messages: Prisma.JsonValue | null
    muteEndTime: bigint | null
    name: string | null
    newJid: string | null
    notSpam: boolean | null
    oldJid: string | null
    pHash: string | null
    parentGroupId: string | null
    participant: Prisma.JsonValue | null
    pinned: number | null
    pnJid: string | null
    pnhDuplicateLidThread: boolean | null
    readOnly: boolean | null
    shareOwnPn: boolean | null
    support: boolean | null
    suspended: boolean | null
    tcToken: Buffer | null
    tcTokenSenderTimestamp: bigint | null
    tcTokenTimestamp: bigint | null
    terminated: boolean | null
    unreadCount: number | null
    unreadMentionCount: number | null
    wallpaper: Prisma.JsonValue | null
    lastMessageRecvTimestamp: number | null
  }, ExtArgs["result"]["chat"]>
  composites: {}
}

/**
 * Model Chat
 * 
 */
export type Chat = runtime.Types.DefaultSelection<ChatPayload>
export type ContactPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Contact"
  objects: {}
  scalars: $Extensions.GetResult<{
    pkId: number
    sessionId: string
    id: string
    name: string | null
    notify: string | null
    verifiedName: string | null
    imgUrl: string | null
    status: string | null
  }, ExtArgs["result"]["contact"]>
  composites: {}
}

/**
 * Model Contact
 * 
 */
export type Contact = runtime.Types.DefaultSelection<ContactPayload>
export type GroupMetadataPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "GroupMetadata"
  objects: {}
  scalars: $Extensions.GetResult<{
    pkId: number
    sessionId: string
    id: string
    owner: string | null
    subject: string
    subjectOwner: string | null
    subjectTime: number | null
    creation: number | null
    desc: string | null
    descOwner: string | null
    descId: string | null
    restrict: boolean | null
    announce: boolean | null
    size: number | null
    participants: Prisma.JsonValue
    ephemeralDuration: number | null
    inviteCode: string | null
  }, ExtArgs["result"]["groupMetadata"]>
  composites: {}
}

/**
 * Model GroupMetadata
 * 
 */
export type GroupMetadata = runtime.Types.DefaultSelection<GroupMetadataPayload>
export type MessagePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Message"
  objects: {}
  scalars: $Extensions.GetResult<{
    pkId: number
    sessionId: string
    remoteJid: string
    id: string
    agentId: string | null
    bizPrivacyStatus: number | null
    broadcast: boolean | null
    clearMedia: boolean | null
    duration: number | null
    ephemeralDuration: number | null
    ephemeralOffToOn: boolean | null
    ephemeralOutOfSync: boolean | null
    ephemeralStartTimestamp: bigint | null
    finalLiveLocation: Prisma.JsonValue | null
    futureproofData: Buffer | null
    ignore: boolean | null
    keepInChat: Prisma.JsonValue | null
    key: Prisma.JsonValue
    labels: Prisma.JsonValue | null
    mediaCiphertextSha256: Buffer | null
    mediaData: Prisma.JsonValue | null
    message: Prisma.JsonValue | null
    messageC2STimestamp: bigint | null
    messageSecret: Buffer | null
    messageStubParameters: Prisma.JsonValue | null
    messageStubType: number | null
    messageTimestamp: bigint | null
    multicast: boolean | null
    originalSelfAuthorUserJidString: string | null
    participant: string | null
    paymentInfo: Prisma.JsonValue | null
    photoChange: Prisma.JsonValue | null
    pollAdditionalMetadata: Prisma.JsonValue | null
    pollUpdates: Prisma.JsonValue | null
    pushName: string | null
    quotedPaymentInfo: Prisma.JsonValue | null
    quotedStickerData: Prisma.JsonValue | null
    reactions: Prisma.JsonValue | null
    revokeMessageTimestamp: bigint | null
    starred: boolean | null
    status: number | null
    statusAlreadyViewed: boolean | null
    statusPsa: Prisma.JsonValue | null
    urlNumber: boolean | null
    urlText: boolean | null
    userReceipt: Prisma.JsonValue | null
    verifiedBizName: string | null
  }, ExtArgs["result"]["message"]>
  composites: {}
}

/**
 * Model Message
 * 
 */
export type Message = runtime.Types.DefaultSelection<MessagePayload>
export type SessionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Session"
  objects: {}
  scalars: $Extensions.GetResult<{
    pkId: number
    sessionId: string
    id: string
    data: string
  }, ExtArgs["result"]["session"]>
  composites: {}
}

/**
 * Model Session
 * 
 */
export type Session = runtime.Types.DefaultSelection<SessionPayload>
export type ChatIncomingPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ChatIncoming"
  objects: {}
  scalars: $Extensions.GetResult<{
    pkId: number
    id: string
    sessionId: string
    remoteJid: string
    message: string
    pushName: string | null
    createdAt: Date
  }, ExtArgs["result"]["chatIncoming"]>
  composites: {}
}

/**
 * Model ChatIncoming
 * 
 */
export type ChatIncoming = runtime.Types.DefaultSelection<ChatIncomingPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Chats
 * const chats = await prisma.chat.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Chats
   * const chats = await prisma.chat.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.chat`: Exposes CRUD operations for the **Chat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chats
    * const chats = await prisma.chat.findMany()
    * ```
    */
  get chat(): Prisma.ChatDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.groupMetadata`: Exposes CRUD operations for the **GroupMetadata** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupMetadata
    * const groupMetadata = await prisma.groupMetadata.findMany()
    * ```
    */
  get groupMetadata(): Prisma.GroupMetadataDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.chatIncoming`: Exposes CRUD operations for the **ChatIncoming** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatIncomings
    * const chatIncomings = await prisma.chatIncoming.findMany()
    * ```
    */
  get chatIncoming(): Prisma.ChatIncomingDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Chat: 'Chat',
    Contact: 'Contact',
    GroupMetadata: 'GroupMetadata',
    Message: 'Message',
    Session: 'Session',
    ChatIncoming: 'ChatIncoming'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'chat' | 'contact' | 'groupMetadata' | 'message' | 'session' | 'chatIncoming'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Chat: {
        payload: ChatPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ChatFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>
          }
          findFirst: {
            args: Prisma.ChatFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>
          }
          findMany: {
            args: Prisma.ChatFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>[]
          }
          create: {
            args: Prisma.ChatCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>
          }
          createMany: {
            args: Prisma.ChatCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChatDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>
          }
          update: {
            args: Prisma.ChatUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>
          }
          deleteMany: {
            args: Prisma.ChatDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChatUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChatUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>
          }
          aggregate: {
            args: Prisma.ChatAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChat>
          }
          groupBy: {
            args: Prisma.ChatGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChatGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatCountArgs<ExtArgs>,
            result: $Utils.Optional<ChatCountAggregateOutputType> | number
          }
        }
      }
      Contact: {
        payload: ContactPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ContactFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactPayload>
          }
          findFirst: {
            args: Prisma.ContactFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactPayload>
          }
          findMany: {
            args: Prisma.ContactFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactPayload>[]
          }
          create: {
            args: Prisma.ContactCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactPayload>
          }
          createMany: {
            args: Prisma.ContactCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ContactDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactPayload>
          }
          update: {
            args: Prisma.ContactUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactPayload>
          }
          deleteMany: {
            args: Prisma.ContactDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ContactUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ContactUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactPayload>
          }
          aggregate: {
            args: Prisma.ContactAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateContact>
          }
          groupBy: {
            args: Prisma.ContactGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactCountArgs<ExtArgs>,
            result: $Utils.Optional<ContactCountAggregateOutputType> | number
          }
        }
      }
      GroupMetadata: {
        payload: GroupMetadataPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.GroupMetadataFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GroupMetadataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupMetadataFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GroupMetadataPayload>
          }
          findFirst: {
            args: Prisma.GroupMetadataFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GroupMetadataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupMetadataFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GroupMetadataPayload>
          }
          findMany: {
            args: Prisma.GroupMetadataFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GroupMetadataPayload>[]
          }
          create: {
            args: Prisma.GroupMetadataCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GroupMetadataPayload>
          }
          createMany: {
            args: Prisma.GroupMetadataCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GroupMetadataDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GroupMetadataPayload>
          }
          update: {
            args: Prisma.GroupMetadataUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GroupMetadataPayload>
          }
          deleteMany: {
            args: Prisma.GroupMetadataDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GroupMetadataUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GroupMetadataUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GroupMetadataPayload>
          }
          aggregate: {
            args: Prisma.GroupMetadataAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGroupMetadata>
          }
          groupBy: {
            args: Prisma.GroupMetadataGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GroupMetadataGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupMetadataCountArgs<ExtArgs>,
            result: $Utils.Optional<GroupMetadataCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: MessagePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>,
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: SessionPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>,
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      ChatIncoming: {
        payload: ChatIncomingPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ChatIncomingFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatIncomingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatIncomingFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatIncomingPayload>
          }
          findFirst: {
            args: Prisma.ChatIncomingFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatIncomingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatIncomingFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatIncomingPayload>
          }
          findMany: {
            args: Prisma.ChatIncomingFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatIncomingPayload>[]
          }
          create: {
            args: Prisma.ChatIncomingCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatIncomingPayload>
          }
          createMany: {
            args: Prisma.ChatIncomingCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChatIncomingDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatIncomingPayload>
          }
          update: {
            args: Prisma.ChatIncomingUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatIncomingPayload>
          }
          deleteMany: {
            args: Prisma.ChatIncomingDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChatIncomingUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChatIncomingUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatIncomingPayload>
          }
          aggregate: {
            args: Prisma.ChatIncomingAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChatIncoming>
          }
          groupBy: {
            args: Prisma.ChatIncomingGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChatIncomingGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatIncomingCountArgs<ExtArgs>,
            result: $Utils.Optional<ChatIncomingCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Chat
   */


  export type AggregateChat = {
    _count: ChatCountAggregateOutputType | null
    _avg: ChatAvgAggregateOutputType | null
    _sum: ChatSumAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  export type ChatAvgAggregateOutputType = {
    pkId: number | null
    conversationTimestamp: number | null
    createdAt: number | null
    endOfHistoryTransferType: number | null
    ephemeralExpiration: number | null
    ephemeralSettingTimestamp: number | null
    lastMsgTimestamp: number | null
    mediaVisibility: number | null
    muteEndTime: number | null
    pinned: number | null
    tcTokenSenderTimestamp: number | null
    tcTokenTimestamp: number | null
    unreadCount: number | null
    unreadMentionCount: number | null
    lastMessageRecvTimestamp: number | null
  }

  export type ChatSumAggregateOutputType = {
    pkId: number | null
    conversationTimestamp: bigint | null
    createdAt: bigint | null
    endOfHistoryTransferType: number | null
    ephemeralExpiration: number | null
    ephemeralSettingTimestamp: bigint | null
    lastMsgTimestamp: bigint | null
    mediaVisibility: number | null
    muteEndTime: bigint | null
    pinned: number | null
    tcTokenSenderTimestamp: bigint | null
    tcTokenTimestamp: bigint | null
    unreadCount: number | null
    unreadMentionCount: number | null
    lastMessageRecvTimestamp: number | null
  }

  export type ChatMinAggregateOutputType = {
    pkId: number | null
    sessionId: string | null
    archived: boolean | null
    contactPrimaryIdentityKey: Buffer | null
    conversationTimestamp: bigint | null
    createdAt: bigint | null
    createdBy: string | null
    description: string | null
    displayName: string | null
    endOfHistoryTransfer: boolean | null
    endOfHistoryTransferType: number | null
    ephemeralExpiration: number | null
    ephemeralSettingTimestamp: bigint | null
    id: string | null
    isDefaultSubgroup: boolean | null
    isParentGroup: boolean | null
    lastMsgTimestamp: bigint | null
    lidJid: string | null
    markedAsUnread: boolean | null
    mediaVisibility: number | null
    muteEndTime: bigint | null
    name: string | null
    newJid: string | null
    notSpam: boolean | null
    oldJid: string | null
    pHash: string | null
    parentGroupId: string | null
    pinned: number | null
    pnJid: string | null
    pnhDuplicateLidThread: boolean | null
    readOnly: boolean | null
    shareOwnPn: boolean | null
    support: boolean | null
    suspended: boolean | null
    tcToken: Buffer | null
    tcTokenSenderTimestamp: bigint | null
    tcTokenTimestamp: bigint | null
    terminated: boolean | null
    unreadCount: number | null
    unreadMentionCount: number | null
    lastMessageRecvTimestamp: number | null
  }

  export type ChatMaxAggregateOutputType = {
    pkId: number | null
    sessionId: string | null
    archived: boolean | null
    contactPrimaryIdentityKey: Buffer | null
    conversationTimestamp: bigint | null
    createdAt: bigint | null
    createdBy: string | null
    description: string | null
    displayName: string | null
    endOfHistoryTransfer: boolean | null
    endOfHistoryTransferType: number | null
    ephemeralExpiration: number | null
    ephemeralSettingTimestamp: bigint | null
    id: string | null
    isDefaultSubgroup: boolean | null
    isParentGroup: boolean | null
    lastMsgTimestamp: bigint | null
    lidJid: string | null
    markedAsUnread: boolean | null
    mediaVisibility: number | null
    muteEndTime: bigint | null
    name: string | null
    newJid: string | null
    notSpam: boolean | null
    oldJid: string | null
    pHash: string | null
    parentGroupId: string | null
    pinned: number | null
    pnJid: string | null
    pnhDuplicateLidThread: boolean | null
    readOnly: boolean | null
    shareOwnPn: boolean | null
    support: boolean | null
    suspended: boolean | null
    tcToken: Buffer | null
    tcTokenSenderTimestamp: bigint | null
    tcTokenTimestamp: bigint | null
    terminated: boolean | null
    unreadCount: number | null
    unreadMentionCount: number | null
    lastMessageRecvTimestamp: number | null
  }

  export type ChatCountAggregateOutputType = {
    pkId: number
    sessionId: number
    archived: number
    contactPrimaryIdentityKey: number
    conversationTimestamp: number
    createdAt: number
    createdBy: number
    description: number
    disappearingMode: number
    displayName: number
    endOfHistoryTransfer: number
    endOfHistoryTransferType: number
    ephemeralExpiration: number
    ephemeralSettingTimestamp: number
    id: number
    isDefaultSubgroup: number
    isParentGroup: number
    lastMsgTimestamp: number
    lidJid: number
    markedAsUnread: number
    mediaVisibility: number
    messages: number
    muteEndTime: number
    name: number
    newJid: number
    notSpam: number
    oldJid: number
    pHash: number
    parentGroupId: number
    participant: number
    pinned: number
    pnJid: number
    pnhDuplicateLidThread: number
    readOnly: number
    shareOwnPn: number
    support: number
    suspended: number
    tcToken: number
    tcTokenSenderTimestamp: number
    tcTokenTimestamp: number
    terminated: number
    unreadCount: number
    unreadMentionCount: number
    wallpaper: number
    lastMessageRecvTimestamp: number
    _all: number
  }


  export type ChatAvgAggregateInputType = {
    pkId?: true
    conversationTimestamp?: true
    createdAt?: true
    endOfHistoryTransferType?: true
    ephemeralExpiration?: true
    ephemeralSettingTimestamp?: true
    lastMsgTimestamp?: true
    mediaVisibility?: true
    muteEndTime?: true
    pinned?: true
    tcTokenSenderTimestamp?: true
    tcTokenTimestamp?: true
    unreadCount?: true
    unreadMentionCount?: true
    lastMessageRecvTimestamp?: true
  }

  export type ChatSumAggregateInputType = {
    pkId?: true
    conversationTimestamp?: true
    createdAt?: true
    endOfHistoryTransferType?: true
    ephemeralExpiration?: true
    ephemeralSettingTimestamp?: true
    lastMsgTimestamp?: true
    mediaVisibility?: true
    muteEndTime?: true
    pinned?: true
    tcTokenSenderTimestamp?: true
    tcTokenTimestamp?: true
    unreadCount?: true
    unreadMentionCount?: true
    lastMessageRecvTimestamp?: true
  }

  export type ChatMinAggregateInputType = {
    pkId?: true
    sessionId?: true
    archived?: true
    contactPrimaryIdentityKey?: true
    conversationTimestamp?: true
    createdAt?: true
    createdBy?: true
    description?: true
    displayName?: true
    endOfHistoryTransfer?: true
    endOfHistoryTransferType?: true
    ephemeralExpiration?: true
    ephemeralSettingTimestamp?: true
    id?: true
    isDefaultSubgroup?: true
    isParentGroup?: true
    lastMsgTimestamp?: true
    lidJid?: true
    markedAsUnread?: true
    mediaVisibility?: true
    muteEndTime?: true
    name?: true
    newJid?: true
    notSpam?: true
    oldJid?: true
    pHash?: true
    parentGroupId?: true
    pinned?: true
    pnJid?: true
    pnhDuplicateLidThread?: true
    readOnly?: true
    shareOwnPn?: true
    support?: true
    suspended?: true
    tcToken?: true
    tcTokenSenderTimestamp?: true
    tcTokenTimestamp?: true
    terminated?: true
    unreadCount?: true
    unreadMentionCount?: true
    lastMessageRecvTimestamp?: true
  }

  export type ChatMaxAggregateInputType = {
    pkId?: true
    sessionId?: true
    archived?: true
    contactPrimaryIdentityKey?: true
    conversationTimestamp?: true
    createdAt?: true
    createdBy?: true
    description?: true
    displayName?: true
    endOfHistoryTransfer?: true
    endOfHistoryTransferType?: true
    ephemeralExpiration?: true
    ephemeralSettingTimestamp?: true
    id?: true
    isDefaultSubgroup?: true
    isParentGroup?: true
    lastMsgTimestamp?: true
    lidJid?: true
    markedAsUnread?: true
    mediaVisibility?: true
    muteEndTime?: true
    name?: true
    newJid?: true
    notSpam?: true
    oldJid?: true
    pHash?: true
    parentGroupId?: true
    pinned?: true
    pnJid?: true
    pnhDuplicateLidThread?: true
    readOnly?: true
    shareOwnPn?: true
    support?: true
    suspended?: true
    tcToken?: true
    tcTokenSenderTimestamp?: true
    tcTokenTimestamp?: true
    terminated?: true
    unreadCount?: true
    unreadMentionCount?: true
    lastMessageRecvTimestamp?: true
  }

  export type ChatCountAggregateInputType = {
    pkId?: true
    sessionId?: true
    archived?: true
    contactPrimaryIdentityKey?: true
    conversationTimestamp?: true
    createdAt?: true
    createdBy?: true
    description?: true
    disappearingMode?: true
    displayName?: true
    endOfHistoryTransfer?: true
    endOfHistoryTransferType?: true
    ephemeralExpiration?: true
    ephemeralSettingTimestamp?: true
    id?: true
    isDefaultSubgroup?: true
    isParentGroup?: true
    lastMsgTimestamp?: true
    lidJid?: true
    markedAsUnread?: true
    mediaVisibility?: true
    messages?: true
    muteEndTime?: true
    name?: true
    newJid?: true
    notSpam?: true
    oldJid?: true
    pHash?: true
    parentGroupId?: true
    participant?: true
    pinned?: true
    pnJid?: true
    pnhDuplicateLidThread?: true
    readOnly?: true
    shareOwnPn?: true
    support?: true
    suspended?: true
    tcToken?: true
    tcTokenSenderTimestamp?: true
    tcTokenTimestamp?: true
    terminated?: true
    unreadCount?: true
    unreadMentionCount?: true
    wallpaper?: true
    lastMessageRecvTimestamp?: true
    _all?: true
  }

  export type ChatAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chat to aggregate.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chats
    **/
    _count?: true | ChatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMaxAggregateInputType
  }

  export type GetChatAggregateType<T extends ChatAggregateArgs> = {
        [P in keyof T & keyof AggregateChat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChat[P]>
      : GetScalarType<T[P], AggregateChat[P]>
  }




  export type ChatGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChatWhereInput
    orderBy?: Enumerable<ChatOrderByWithAggregationInput>
    by: ChatScalarFieldEnum[]
    having?: ChatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatCountAggregateInputType | true
    _avg?: ChatAvgAggregateInputType
    _sum?: ChatSumAggregateInputType
    _min?: ChatMinAggregateInputType
    _max?: ChatMaxAggregateInputType
  }


  export type ChatGroupByOutputType = {
    pkId: number
    sessionId: string
    archived: boolean | null
    contactPrimaryIdentityKey: Buffer | null
    conversationTimestamp: bigint | null
    createdAt: bigint | null
    createdBy: string | null
    description: string | null
    disappearingMode: JsonValue | null
    displayName: string | null
    endOfHistoryTransfer: boolean | null
    endOfHistoryTransferType: number | null
    ephemeralExpiration: number | null
    ephemeralSettingTimestamp: bigint | null
    id: string
    isDefaultSubgroup: boolean | null
    isParentGroup: boolean | null
    lastMsgTimestamp: bigint | null
    lidJid: string | null
    markedAsUnread: boolean | null
    mediaVisibility: number | null
    messages: JsonValue | null
    muteEndTime: bigint | null
    name: string | null
    newJid: string | null
    notSpam: boolean | null
    oldJid: string | null
    pHash: string | null
    parentGroupId: string | null
    participant: JsonValue | null
    pinned: number | null
    pnJid: string | null
    pnhDuplicateLidThread: boolean | null
    readOnly: boolean | null
    shareOwnPn: boolean | null
    support: boolean | null
    suspended: boolean | null
    tcToken: Buffer | null
    tcTokenSenderTimestamp: bigint | null
    tcTokenTimestamp: bigint | null
    terminated: boolean | null
    unreadCount: number | null
    unreadMentionCount: number | null
    wallpaper: JsonValue | null
    lastMessageRecvTimestamp: number | null
    _count: ChatCountAggregateOutputType | null
    _avg: ChatAvgAggregateOutputType | null
    _sum: ChatSumAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  type GetChatGroupByPayload<T extends ChatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatGroupByOutputType[P]>
            : GetScalarType<T[P], ChatGroupByOutputType[P]>
        }
      >
    >


  export type ChatSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pkId?: boolean
    sessionId?: boolean
    archived?: boolean
    contactPrimaryIdentityKey?: boolean
    conversationTimestamp?: boolean
    createdAt?: boolean
    createdBy?: boolean
    description?: boolean
    disappearingMode?: boolean
    displayName?: boolean
    endOfHistoryTransfer?: boolean
    endOfHistoryTransferType?: boolean
    ephemeralExpiration?: boolean
    ephemeralSettingTimestamp?: boolean
    id?: boolean
    isDefaultSubgroup?: boolean
    isParentGroup?: boolean
    lastMsgTimestamp?: boolean
    lidJid?: boolean
    markedAsUnread?: boolean
    mediaVisibility?: boolean
    messages?: boolean
    muteEndTime?: boolean
    name?: boolean
    newJid?: boolean
    notSpam?: boolean
    oldJid?: boolean
    pHash?: boolean
    parentGroupId?: boolean
    participant?: boolean
    pinned?: boolean
    pnJid?: boolean
    pnhDuplicateLidThread?: boolean
    readOnly?: boolean
    shareOwnPn?: boolean
    support?: boolean
    suspended?: boolean
    tcToken?: boolean
    tcTokenSenderTimestamp?: boolean
    tcTokenTimestamp?: boolean
    terminated?: boolean
    unreadCount?: boolean
    unreadMentionCount?: boolean
    wallpaper?: boolean
    lastMessageRecvTimestamp?: boolean
  }, ExtArgs["result"]["chat"]>

  export type ChatSelectScalar = {
    pkId?: boolean
    sessionId?: boolean
    archived?: boolean
    contactPrimaryIdentityKey?: boolean
    conversationTimestamp?: boolean
    createdAt?: boolean
    createdBy?: boolean
    description?: boolean
    disappearingMode?: boolean
    displayName?: boolean
    endOfHistoryTransfer?: boolean
    endOfHistoryTransferType?: boolean
    ephemeralExpiration?: boolean
    ephemeralSettingTimestamp?: boolean
    id?: boolean
    isDefaultSubgroup?: boolean
    isParentGroup?: boolean
    lastMsgTimestamp?: boolean
    lidJid?: boolean
    markedAsUnread?: boolean
    mediaVisibility?: boolean
    messages?: boolean
    muteEndTime?: boolean
    name?: boolean
    newJid?: boolean
    notSpam?: boolean
    oldJid?: boolean
    pHash?: boolean
    parentGroupId?: boolean
    participant?: boolean
    pinned?: boolean
    pnJid?: boolean
    pnhDuplicateLidThread?: boolean
    readOnly?: boolean
    shareOwnPn?: boolean
    support?: boolean
    suspended?: boolean
    tcToken?: boolean
    tcTokenSenderTimestamp?: boolean
    tcTokenTimestamp?: boolean
    terminated?: boolean
    unreadCount?: boolean
    unreadMentionCount?: boolean
    wallpaper?: boolean
    lastMessageRecvTimestamp?: boolean
  }


  type ChatGetPayload<S extends boolean | null | undefined | ChatArgs> = $Types.GetResult<ChatPayload, S>

  type ChatCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ChatFindManyArgs, 'select' | 'include'> & {
      select?: ChatCountAggregateInputType | true
    }

  export interface ChatDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chat'], meta: { name: 'Chat' } }
    /**
     * Find zero or one Chat that matches the filter.
     * @param {ChatFindUniqueArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChatFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChatFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Chat'> extends True ? Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Chat that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChatFindUniqueOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChatFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Chat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChatFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChatFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Chat'> extends True ? Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Chat that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChatFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Chats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chats
     * const chats = await prisma.chat.findMany()
     * 
     * // Get first 10 Chats
     * const chats = await prisma.chat.findMany({ take: 10 })
     * 
     * // Only select the `pkId`
     * const chatWithPkIdOnly = await prisma.chat.findMany({ select: { pkId: true } })
     * 
    **/
    findMany<T extends ChatFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Chat.
     * @param {ChatCreateArgs} args - Arguments to create a Chat.
     * @example
     * // Create one Chat
     * const Chat = await prisma.chat.create({
     *   data: {
     *     // ... data to create a Chat
     *   }
     * })
     * 
    **/
    create<T extends ChatCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatCreateArgs<ExtArgs>>
    ): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Chats.
     *     @param {ChatCreateManyArgs} args - Arguments to create many Chats.
     *     @example
     *     // Create many Chats
     *     const chat = await prisma.chat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChatCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Chat.
     * @param {ChatDeleteArgs} args - Arguments to delete one Chat.
     * @example
     * // Delete one Chat
     * const Chat = await prisma.chat.delete({
     *   where: {
     *     // ... filter to delete one Chat
     *   }
     * })
     * 
    **/
    delete<T extends ChatDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChatDeleteArgs<ExtArgs>>
    ): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Chat.
     * @param {ChatUpdateArgs} args - Arguments to update one Chat.
     * @example
     * // Update one Chat
     * const chat = await prisma.chat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChatUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatUpdateArgs<ExtArgs>>
    ): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Chats.
     * @param {ChatDeleteManyArgs} args - Arguments to filter Chats to delete.
     * @example
     * // Delete a few Chats
     * const { count } = await prisma.chat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChatDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chats
     * const chat = await prisma.chat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChatUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChatUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chat.
     * @param {ChatUpsertArgs} args - Arguments to update or create a Chat.
     * @example
     * // Update or create a Chat
     * const chat = await prisma.chat.upsert({
     *   create: {
     *     // ... data to create a Chat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chat we want to update
     *   }
     * })
    **/
    upsert<T extends ChatUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChatUpsertArgs<ExtArgs>>
    ): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatCountArgs} args - Arguments to filter Chats to count.
     * @example
     * // Count the number of Chats
     * const count = await prisma.chat.count({
     *   where: {
     *     // ... the filter for the Chats we want to count
     *   }
     * })
    **/
    count<T extends ChatCountArgs>(
      args?: Subset<T, ChatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatAggregateArgs>(args: Subset<T, ChatAggregateArgs>): Prisma.PrismaPromise<GetChatAggregateType<T>>

    /**
     * Group by Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatGroupByArgs['orderBy'] }
        : { orderBy?: ChatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Chat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChatClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Chat base type for findUnique actions
   */
  export type ChatFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }

  /**
   * Chat findUnique
   */
  export interface ChatFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ChatFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Chat findUniqueOrThrow
   */
  export type ChatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat base type for findFirst actions
   */
  export type ChatFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: Enumerable<ChatScalarFieldEnum>
  }

  /**
   * Chat findFirst
   */
  export interface ChatFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ChatFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Chat findFirstOrThrow
   */
  export type ChatFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: Enumerable<ChatScalarFieldEnum>
  }


  /**
   * Chat findMany
   */
  export type ChatFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Filter, which Chats to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    distinct?: Enumerable<ChatScalarFieldEnum>
  }


  /**
   * Chat create
   */
  export type ChatCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * The data needed to create a Chat.
     */
    data: XOR<ChatCreateInput, ChatUncheckedCreateInput>
  }


  /**
   * Chat createMany
   */
  export type ChatCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Chats.
     */
    data: Enumerable<ChatCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Chat update
   */
  export type ChatUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * The data needed to update a Chat.
     */
    data: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
    /**
     * Choose, which Chat to update.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat updateMany
   */
  export type ChatUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Chats.
     */
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyInput>
    /**
     * Filter which Chats to update
     */
    where?: ChatWhereInput
  }


  /**
   * Chat upsert
   */
  export type ChatUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * The filter to search for the Chat to update in case it exists.
     */
    where: ChatWhereUniqueInput
    /**
     * In case the Chat found by the `where` argument doesn't exist, create a new Chat with this data.
     */
    create: XOR<ChatCreateInput, ChatUncheckedCreateInput>
    /**
     * In case the Chat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
  }


  /**
   * Chat delete
   */
  export type ChatDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Filter which Chat to delete.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat deleteMany
   */
  export type ChatDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chats to delete
     */
    where?: ChatWhereInput
  }


  /**
   * Chat without action
   */
  export type ChatArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
  }



  /**
   * Model Contact
   */


  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null
    _avg: ContactAvgAggregateOutputType | null
    _sum: ContactSumAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  export type ContactAvgAggregateOutputType = {
    pkId: number | null
  }

  export type ContactSumAggregateOutputType = {
    pkId: number | null
  }

  export type ContactMinAggregateOutputType = {
    pkId: number | null
    sessionId: string | null
    id: string | null
    name: string | null
    notify: string | null
    verifiedName: string | null
    imgUrl: string | null
    status: string | null
  }

  export type ContactMaxAggregateOutputType = {
    pkId: number | null
    sessionId: string | null
    id: string | null
    name: string | null
    notify: string | null
    verifiedName: string | null
    imgUrl: string | null
    status: string | null
  }

  export type ContactCountAggregateOutputType = {
    pkId: number
    sessionId: number
    id: number
    name: number
    notify: number
    verifiedName: number
    imgUrl: number
    status: number
    _all: number
  }


  export type ContactAvgAggregateInputType = {
    pkId?: true
  }

  export type ContactSumAggregateInputType = {
    pkId?: true
  }

  export type ContactMinAggregateInputType = {
    pkId?: true
    sessionId?: true
    id?: true
    name?: true
    notify?: true
    verifiedName?: true
    imgUrl?: true
    status?: true
  }

  export type ContactMaxAggregateInputType = {
    pkId?: true
    sessionId?: true
    id?: true
    name?: true
    notify?: true
    verifiedName?: true
    imgUrl?: true
    status?: true
  }

  export type ContactCountAggregateInputType = {
    pkId?: true
    sessionId?: true
    id?: true
    name?: true
    notify?: true
    verifiedName?: true
    imgUrl?: true
    status?: true
    _all?: true
  }

  export type ContactAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact to aggregate.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: Enumerable<ContactOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }




  export type ContactGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
    orderBy?: Enumerable<ContactOrderByWithAggregationInput>
    by: ContactScalarFieldEnum[]
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactCountAggregateInputType | true
    _avg?: ContactAvgAggregateInputType
    _sum?: ContactSumAggregateInputType
    _min?: ContactMinAggregateInputType
    _max?: ContactMaxAggregateInputType
  }


  export type ContactGroupByOutputType = {
    pkId: number
    sessionId: string
    id: string
    name: string | null
    notify: string | null
    verifiedName: string | null
    imgUrl: string | null
    status: string | null
    _count: ContactCountAggregateOutputType | null
    _avg: ContactAvgAggregateOutputType | null
    _sum: ContactSumAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pkId?: boolean
    sessionId?: boolean
    id?: boolean
    name?: boolean
    notify?: boolean
    verifiedName?: boolean
    imgUrl?: boolean
    status?: boolean
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectScalar = {
    pkId?: boolean
    sessionId?: boolean
    id?: boolean
    name?: boolean
    notify?: boolean
    verifiedName?: boolean
    imgUrl?: boolean
    status?: boolean
  }


  type ContactGetPayload<S extends boolean | null | undefined | ContactArgs> = $Types.GetResult<ContactPayload, S>

  type ContactCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ContactFindManyArgs, 'select' | 'include'> & {
      select?: ContactCountAggregateInputType | true
    }

  export interface ContactDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact'], meta: { name: 'Contact' } }
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContactFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Contact'> extends True ? Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Contact that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContactFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ContactFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Contact'> extends True ? Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Contact that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ContactFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `pkId`
     * const contactWithPkIdOnly = await prisma.contact.findMany({ select: { pkId: true } })
     * 
    **/
    findMany<T extends ContactFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ContactPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
    **/
    create<T extends ContactCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ContactCreateArgs<ExtArgs>>
    ): Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Contacts.
     *     @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     *     @example
     *     // Create many Contacts
     *     const contact = await prisma.contact.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ContactCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
    **/
    delete<T extends ContactDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ContactDeleteArgs<ExtArgs>>
    ): Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContactUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ContactUpdateArgs<ExtArgs>>
    ): Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContactDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContactUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
    **/
    upsert<T extends ContactUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ContactUpsertArgs<ExtArgs>>
    ): Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): Prisma.PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContactClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Contact base type for findUnique actions
   */
  export type ContactFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findUnique
   */
  export interface ContactFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ContactFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Contact findUniqueOrThrow
   */
  export type ContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }


  /**
   * Contact base type for findFirst actions
   */
  export type ContactFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: Enumerable<ContactOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: Enumerable<ContactScalarFieldEnum>
  }

  /**
   * Contact findFirst
   */
  export interface ContactFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ContactFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Contact findFirstOrThrow
   */
  export type ContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: Enumerable<ContactOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: Enumerable<ContactScalarFieldEnum>
  }


  /**
   * Contact findMany
   */
  export type ContactFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: Enumerable<ContactOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    distinct?: Enumerable<ContactScalarFieldEnum>
  }


  /**
   * Contact create
   */
  export type ContactCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * The data needed to create a Contact.
     */
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }


  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contacts.
     */
    data: Enumerable<ContactCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Contact update
   */
  export type ContactUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * The data needed to update a Contact.
     */
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
     */
    where: ContactWhereUniqueInput
  }


  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
  }


  /**
   * Contact upsert
   */
  export type ContactUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * The filter to search for the Contact to update in case it exists.
     */
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     */
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }


  /**
   * Contact delete
   */
  export type ContactDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Filter which Contact to delete.
     */
    where: ContactWhereUniqueInput
  }


  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to delete
     */
    where?: ContactWhereInput
  }


  /**
   * Contact without action
   */
  export type ContactArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
  }



  /**
   * Model GroupMetadata
   */


  export type AggregateGroupMetadata = {
    _count: GroupMetadataCountAggregateOutputType | null
    _avg: GroupMetadataAvgAggregateOutputType | null
    _sum: GroupMetadataSumAggregateOutputType | null
    _min: GroupMetadataMinAggregateOutputType | null
    _max: GroupMetadataMaxAggregateOutputType | null
  }

  export type GroupMetadataAvgAggregateOutputType = {
    pkId: number | null
    subjectTime: number | null
    creation: number | null
    size: number | null
    ephemeralDuration: number | null
  }

  export type GroupMetadataSumAggregateOutputType = {
    pkId: number | null
    subjectTime: number | null
    creation: number | null
    size: number | null
    ephemeralDuration: number | null
  }

  export type GroupMetadataMinAggregateOutputType = {
    pkId: number | null
    sessionId: string | null
    id: string | null
    owner: string | null
    subject: string | null
    subjectOwner: string | null
    subjectTime: number | null
    creation: number | null
    desc: string | null
    descOwner: string | null
    descId: string | null
    restrict: boolean | null
    announce: boolean | null
    size: number | null
    ephemeralDuration: number | null
    inviteCode: string | null
  }

  export type GroupMetadataMaxAggregateOutputType = {
    pkId: number | null
    sessionId: string | null
    id: string | null
    owner: string | null
    subject: string | null
    subjectOwner: string | null
    subjectTime: number | null
    creation: number | null
    desc: string | null
    descOwner: string | null
    descId: string | null
    restrict: boolean | null
    announce: boolean | null
    size: number | null
    ephemeralDuration: number | null
    inviteCode: string | null
  }

  export type GroupMetadataCountAggregateOutputType = {
    pkId: number
    sessionId: number
    id: number
    owner: number
    subject: number
    subjectOwner: number
    subjectTime: number
    creation: number
    desc: number
    descOwner: number
    descId: number
    restrict: number
    announce: number
    size: number
    participants: number
    ephemeralDuration: number
    inviteCode: number
    _all: number
  }


  export type GroupMetadataAvgAggregateInputType = {
    pkId?: true
    subjectTime?: true
    creation?: true
    size?: true
    ephemeralDuration?: true
  }

  export type GroupMetadataSumAggregateInputType = {
    pkId?: true
    subjectTime?: true
    creation?: true
    size?: true
    ephemeralDuration?: true
  }

  export type GroupMetadataMinAggregateInputType = {
    pkId?: true
    sessionId?: true
    id?: true
    owner?: true
    subject?: true
    subjectOwner?: true
    subjectTime?: true
    creation?: true
    desc?: true
    descOwner?: true
    descId?: true
    restrict?: true
    announce?: true
    size?: true
    ephemeralDuration?: true
    inviteCode?: true
  }

  export type GroupMetadataMaxAggregateInputType = {
    pkId?: true
    sessionId?: true
    id?: true
    owner?: true
    subject?: true
    subjectOwner?: true
    subjectTime?: true
    creation?: true
    desc?: true
    descOwner?: true
    descId?: true
    restrict?: true
    announce?: true
    size?: true
    ephemeralDuration?: true
    inviteCode?: true
  }

  export type GroupMetadataCountAggregateInputType = {
    pkId?: true
    sessionId?: true
    id?: true
    owner?: true
    subject?: true
    subjectOwner?: true
    subjectTime?: true
    creation?: true
    desc?: true
    descOwner?: true
    descId?: true
    restrict?: true
    announce?: true
    size?: true
    participants?: true
    ephemeralDuration?: true
    inviteCode?: true
    _all?: true
  }

  export type GroupMetadataAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupMetadata to aggregate.
     */
    where?: GroupMetadataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupMetadata to fetch.
     */
    orderBy?: Enumerable<GroupMetadataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupMetadataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupMetadata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupMetadata.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupMetadata
    **/
    _count?: true | GroupMetadataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupMetadataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupMetadataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupMetadataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupMetadataMaxAggregateInputType
  }

  export type GetGroupMetadataAggregateType<T extends GroupMetadataAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupMetadata]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupMetadata[P]>
      : GetScalarType<T[P], AggregateGroupMetadata[P]>
  }




  export type GroupMetadataGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GroupMetadataWhereInput
    orderBy?: Enumerable<GroupMetadataOrderByWithAggregationInput>
    by: GroupMetadataScalarFieldEnum[]
    having?: GroupMetadataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupMetadataCountAggregateInputType | true
    _avg?: GroupMetadataAvgAggregateInputType
    _sum?: GroupMetadataSumAggregateInputType
    _min?: GroupMetadataMinAggregateInputType
    _max?: GroupMetadataMaxAggregateInputType
  }


  export type GroupMetadataGroupByOutputType = {
    pkId: number
    sessionId: string
    id: string
    owner: string | null
    subject: string
    subjectOwner: string | null
    subjectTime: number | null
    creation: number | null
    desc: string | null
    descOwner: string | null
    descId: string | null
    restrict: boolean | null
    announce: boolean | null
    size: number | null
    participants: JsonValue
    ephemeralDuration: number | null
    inviteCode: string | null
    _count: GroupMetadataCountAggregateOutputType | null
    _avg: GroupMetadataAvgAggregateOutputType | null
    _sum: GroupMetadataSumAggregateOutputType | null
    _min: GroupMetadataMinAggregateOutputType | null
    _max: GroupMetadataMaxAggregateOutputType | null
  }

  type GetGroupMetadataGroupByPayload<T extends GroupMetadataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GroupMetadataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupMetadataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupMetadataGroupByOutputType[P]>
            : GetScalarType<T[P], GroupMetadataGroupByOutputType[P]>
        }
      >
    >


  export type GroupMetadataSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pkId?: boolean
    sessionId?: boolean
    id?: boolean
    owner?: boolean
    subject?: boolean
    subjectOwner?: boolean
    subjectTime?: boolean
    creation?: boolean
    desc?: boolean
    descOwner?: boolean
    descId?: boolean
    restrict?: boolean
    announce?: boolean
    size?: boolean
    participants?: boolean
    ephemeralDuration?: boolean
    inviteCode?: boolean
  }, ExtArgs["result"]["groupMetadata"]>

  export type GroupMetadataSelectScalar = {
    pkId?: boolean
    sessionId?: boolean
    id?: boolean
    owner?: boolean
    subject?: boolean
    subjectOwner?: boolean
    subjectTime?: boolean
    creation?: boolean
    desc?: boolean
    descOwner?: boolean
    descId?: boolean
    restrict?: boolean
    announce?: boolean
    size?: boolean
    participants?: boolean
    ephemeralDuration?: boolean
    inviteCode?: boolean
  }


  type GroupMetadataGetPayload<S extends boolean | null | undefined | GroupMetadataArgs> = $Types.GetResult<GroupMetadataPayload, S>

  type GroupMetadataCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<GroupMetadataFindManyArgs, 'select' | 'include'> & {
      select?: GroupMetadataCountAggregateInputType | true
    }

  export interface GroupMetadataDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GroupMetadata'], meta: { name: 'GroupMetadata' } }
    /**
     * Find zero or one GroupMetadata that matches the filter.
     * @param {GroupMetadataFindUniqueArgs} args - Arguments to find a GroupMetadata
     * @example
     * // Get one GroupMetadata
     * const groupMetadata = await prisma.groupMetadata.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupMetadataFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GroupMetadataFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GroupMetadata'> extends True ? Prisma__GroupMetadataClient<$Types.GetResult<GroupMetadataPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__GroupMetadataClient<$Types.GetResult<GroupMetadataPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one GroupMetadata that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GroupMetadataFindUniqueOrThrowArgs} args - Arguments to find a GroupMetadata
     * @example
     * // Get one GroupMetadata
     * const groupMetadata = await prisma.groupMetadata.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupMetadataFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupMetadataFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GroupMetadataClient<$Types.GetResult<GroupMetadataPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first GroupMetadata that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMetadataFindFirstArgs} args - Arguments to find a GroupMetadata
     * @example
     * // Get one GroupMetadata
     * const groupMetadata = await prisma.groupMetadata.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupMetadataFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GroupMetadataFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GroupMetadata'> extends True ? Prisma__GroupMetadataClient<$Types.GetResult<GroupMetadataPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__GroupMetadataClient<$Types.GetResult<GroupMetadataPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first GroupMetadata that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMetadataFindFirstOrThrowArgs} args - Arguments to find a GroupMetadata
     * @example
     * // Get one GroupMetadata
     * const groupMetadata = await prisma.groupMetadata.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupMetadataFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupMetadataFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GroupMetadataClient<$Types.GetResult<GroupMetadataPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more GroupMetadata that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMetadataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupMetadata
     * const groupMetadata = await prisma.groupMetadata.findMany()
     * 
     * // Get first 10 GroupMetadata
     * const groupMetadata = await prisma.groupMetadata.findMany({ take: 10 })
     * 
     * // Only select the `pkId`
     * const groupMetadataWithPkIdOnly = await prisma.groupMetadata.findMany({ select: { pkId: true } })
     * 
    **/
    findMany<T extends GroupMetadataFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupMetadataFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<GroupMetadataPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a GroupMetadata.
     * @param {GroupMetadataCreateArgs} args - Arguments to create a GroupMetadata.
     * @example
     * // Create one GroupMetadata
     * const GroupMetadata = await prisma.groupMetadata.create({
     *   data: {
     *     // ... data to create a GroupMetadata
     *   }
     * })
     * 
    **/
    create<T extends GroupMetadataCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GroupMetadataCreateArgs<ExtArgs>>
    ): Prisma__GroupMetadataClient<$Types.GetResult<GroupMetadataPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many GroupMetadata.
     *     @param {GroupMetadataCreateManyArgs} args - Arguments to create many GroupMetadata.
     *     @example
     *     // Create many GroupMetadata
     *     const groupMetadata = await prisma.groupMetadata.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GroupMetadataCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupMetadataCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GroupMetadata.
     * @param {GroupMetadataDeleteArgs} args - Arguments to delete one GroupMetadata.
     * @example
     * // Delete one GroupMetadata
     * const GroupMetadata = await prisma.groupMetadata.delete({
     *   where: {
     *     // ... filter to delete one GroupMetadata
     *   }
     * })
     * 
    **/
    delete<T extends GroupMetadataDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GroupMetadataDeleteArgs<ExtArgs>>
    ): Prisma__GroupMetadataClient<$Types.GetResult<GroupMetadataPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one GroupMetadata.
     * @param {GroupMetadataUpdateArgs} args - Arguments to update one GroupMetadata.
     * @example
     * // Update one GroupMetadata
     * const groupMetadata = await prisma.groupMetadata.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupMetadataUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GroupMetadataUpdateArgs<ExtArgs>>
    ): Prisma__GroupMetadataClient<$Types.GetResult<GroupMetadataPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more GroupMetadata.
     * @param {GroupMetadataDeleteManyArgs} args - Arguments to filter GroupMetadata to delete.
     * @example
     * // Delete a few GroupMetadata
     * const { count } = await prisma.groupMetadata.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupMetadataDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupMetadataDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupMetadata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMetadataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupMetadata
     * const groupMetadata = await prisma.groupMetadata.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupMetadataUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GroupMetadataUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GroupMetadata.
     * @param {GroupMetadataUpsertArgs} args - Arguments to update or create a GroupMetadata.
     * @example
     * // Update or create a GroupMetadata
     * const groupMetadata = await prisma.groupMetadata.upsert({
     *   create: {
     *     // ... data to create a GroupMetadata
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupMetadata we want to update
     *   }
     * })
    **/
    upsert<T extends GroupMetadataUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GroupMetadataUpsertArgs<ExtArgs>>
    ): Prisma__GroupMetadataClient<$Types.GetResult<GroupMetadataPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of GroupMetadata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMetadataCountArgs} args - Arguments to filter GroupMetadata to count.
     * @example
     * // Count the number of GroupMetadata
     * const count = await prisma.groupMetadata.count({
     *   where: {
     *     // ... the filter for the GroupMetadata we want to count
     *   }
     * })
    **/
    count<T extends GroupMetadataCountArgs>(
      args?: Subset<T, GroupMetadataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupMetadataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupMetadata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMetadataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupMetadataAggregateArgs>(args: Subset<T, GroupMetadataAggregateArgs>): Prisma.PrismaPromise<GetGroupMetadataAggregateType<T>>

    /**
     * Group by GroupMetadata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMetadataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupMetadataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupMetadataGroupByArgs['orderBy'] }
        : { orderBy?: GroupMetadataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupMetadataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupMetadataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupMetadata.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GroupMetadataClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * GroupMetadata base type for findUnique actions
   */
  export type GroupMetadataFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMetadata
     */
    select?: GroupMetadataSelect<ExtArgs> | null
    /**
     * Filter, which GroupMetadata to fetch.
     */
    where: GroupMetadataWhereUniqueInput
  }

  /**
   * GroupMetadata findUnique
   */
  export interface GroupMetadataFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends GroupMetadataFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GroupMetadata findUniqueOrThrow
   */
  export type GroupMetadataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMetadata
     */
    select?: GroupMetadataSelect<ExtArgs> | null
    /**
     * Filter, which GroupMetadata to fetch.
     */
    where: GroupMetadataWhereUniqueInput
  }


  /**
   * GroupMetadata base type for findFirst actions
   */
  export type GroupMetadataFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMetadata
     */
    select?: GroupMetadataSelect<ExtArgs> | null
    /**
     * Filter, which GroupMetadata to fetch.
     */
    where?: GroupMetadataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupMetadata to fetch.
     */
    orderBy?: Enumerable<GroupMetadataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupMetadata.
     */
    cursor?: GroupMetadataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupMetadata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupMetadata.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupMetadata.
     */
    distinct?: Enumerable<GroupMetadataScalarFieldEnum>
  }

  /**
   * GroupMetadata findFirst
   */
  export interface GroupMetadataFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends GroupMetadataFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GroupMetadata findFirstOrThrow
   */
  export type GroupMetadataFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMetadata
     */
    select?: GroupMetadataSelect<ExtArgs> | null
    /**
     * Filter, which GroupMetadata to fetch.
     */
    where?: GroupMetadataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupMetadata to fetch.
     */
    orderBy?: Enumerable<GroupMetadataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupMetadata.
     */
    cursor?: GroupMetadataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupMetadata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupMetadata.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupMetadata.
     */
    distinct?: Enumerable<GroupMetadataScalarFieldEnum>
  }


  /**
   * GroupMetadata findMany
   */
  export type GroupMetadataFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMetadata
     */
    select?: GroupMetadataSelect<ExtArgs> | null
    /**
     * Filter, which GroupMetadata to fetch.
     */
    where?: GroupMetadataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupMetadata to fetch.
     */
    orderBy?: Enumerable<GroupMetadataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupMetadata.
     */
    cursor?: GroupMetadataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupMetadata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupMetadata.
     */
    skip?: number
    distinct?: Enumerable<GroupMetadataScalarFieldEnum>
  }


  /**
   * GroupMetadata create
   */
  export type GroupMetadataCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMetadata
     */
    select?: GroupMetadataSelect<ExtArgs> | null
    /**
     * The data needed to create a GroupMetadata.
     */
    data: XOR<GroupMetadataCreateInput, GroupMetadataUncheckedCreateInput>
  }


  /**
   * GroupMetadata createMany
   */
  export type GroupMetadataCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GroupMetadata.
     */
    data: Enumerable<GroupMetadataCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GroupMetadata update
   */
  export type GroupMetadataUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMetadata
     */
    select?: GroupMetadataSelect<ExtArgs> | null
    /**
     * The data needed to update a GroupMetadata.
     */
    data: XOR<GroupMetadataUpdateInput, GroupMetadataUncheckedUpdateInput>
    /**
     * Choose, which GroupMetadata to update.
     */
    where: GroupMetadataWhereUniqueInput
  }


  /**
   * GroupMetadata updateMany
   */
  export type GroupMetadataUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GroupMetadata.
     */
    data: XOR<GroupMetadataUpdateManyMutationInput, GroupMetadataUncheckedUpdateManyInput>
    /**
     * Filter which GroupMetadata to update
     */
    where?: GroupMetadataWhereInput
  }


  /**
   * GroupMetadata upsert
   */
  export type GroupMetadataUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMetadata
     */
    select?: GroupMetadataSelect<ExtArgs> | null
    /**
     * The filter to search for the GroupMetadata to update in case it exists.
     */
    where: GroupMetadataWhereUniqueInput
    /**
     * In case the GroupMetadata found by the `where` argument doesn't exist, create a new GroupMetadata with this data.
     */
    create: XOR<GroupMetadataCreateInput, GroupMetadataUncheckedCreateInput>
    /**
     * In case the GroupMetadata was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupMetadataUpdateInput, GroupMetadataUncheckedUpdateInput>
  }


  /**
   * GroupMetadata delete
   */
  export type GroupMetadataDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMetadata
     */
    select?: GroupMetadataSelect<ExtArgs> | null
    /**
     * Filter which GroupMetadata to delete.
     */
    where: GroupMetadataWhereUniqueInput
  }


  /**
   * GroupMetadata deleteMany
   */
  export type GroupMetadataDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupMetadata to delete
     */
    where?: GroupMetadataWhereInput
  }


  /**
   * GroupMetadata without action
   */
  export type GroupMetadataArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupMetadata
     */
    select?: GroupMetadataSelect<ExtArgs> | null
  }



  /**
   * Model Message
   */


  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    pkId: number | null
    bizPrivacyStatus: number | null
    duration: number | null
    ephemeralDuration: number | null
    ephemeralStartTimestamp: number | null
    messageC2STimestamp: number | null
    messageStubType: number | null
    messageTimestamp: number | null
    revokeMessageTimestamp: number | null
    status: number | null
  }

  export type MessageSumAggregateOutputType = {
    pkId: number | null
    bizPrivacyStatus: number | null
    duration: number | null
    ephemeralDuration: number | null
    ephemeralStartTimestamp: bigint | null
    messageC2STimestamp: bigint | null
    messageStubType: number | null
    messageTimestamp: bigint | null
    revokeMessageTimestamp: bigint | null
    status: number | null
  }

  export type MessageMinAggregateOutputType = {
    pkId: number | null
    sessionId: string | null
    remoteJid: string | null
    id: string | null
    agentId: string | null
    bizPrivacyStatus: number | null
    broadcast: boolean | null
    clearMedia: boolean | null
    duration: number | null
    ephemeralDuration: number | null
    ephemeralOffToOn: boolean | null
    ephemeralOutOfSync: boolean | null
    ephemeralStartTimestamp: bigint | null
    futureproofData: Buffer | null
    ignore: boolean | null
    mediaCiphertextSha256: Buffer | null
    messageC2STimestamp: bigint | null
    messageSecret: Buffer | null
    messageStubType: number | null
    messageTimestamp: bigint | null
    multicast: boolean | null
    originalSelfAuthorUserJidString: string | null
    participant: string | null
    pushName: string | null
    revokeMessageTimestamp: bigint | null
    starred: boolean | null
    status: number | null
    statusAlreadyViewed: boolean | null
    urlNumber: boolean | null
    urlText: boolean | null
    verifiedBizName: string | null
  }

  export type MessageMaxAggregateOutputType = {
    pkId: number | null
    sessionId: string | null
    remoteJid: string | null
    id: string | null
    agentId: string | null
    bizPrivacyStatus: number | null
    broadcast: boolean | null
    clearMedia: boolean | null
    duration: number | null
    ephemeralDuration: number | null
    ephemeralOffToOn: boolean | null
    ephemeralOutOfSync: boolean | null
    ephemeralStartTimestamp: bigint | null
    futureproofData: Buffer | null
    ignore: boolean | null
    mediaCiphertextSha256: Buffer | null
    messageC2STimestamp: bigint | null
    messageSecret: Buffer | null
    messageStubType: number | null
    messageTimestamp: bigint | null
    multicast: boolean | null
    originalSelfAuthorUserJidString: string | null
    participant: string | null
    pushName: string | null
    revokeMessageTimestamp: bigint | null
    starred: boolean | null
    status: number | null
    statusAlreadyViewed: boolean | null
    urlNumber: boolean | null
    urlText: boolean | null
    verifiedBizName: string | null
  }

  export type MessageCountAggregateOutputType = {
    pkId: number
    sessionId: number
    remoteJid: number
    id: number
    agentId: number
    bizPrivacyStatus: number
    broadcast: number
    clearMedia: number
    duration: number
    ephemeralDuration: number
    ephemeralOffToOn: number
    ephemeralOutOfSync: number
    ephemeralStartTimestamp: number
    finalLiveLocation: number
    futureproofData: number
    ignore: number
    keepInChat: number
    key: number
    labels: number
    mediaCiphertextSha256: number
    mediaData: number
    message: number
    messageC2STimestamp: number
    messageSecret: number
    messageStubParameters: number
    messageStubType: number
    messageTimestamp: number
    multicast: number
    originalSelfAuthorUserJidString: number
    participant: number
    paymentInfo: number
    photoChange: number
    pollAdditionalMetadata: number
    pollUpdates: number
    pushName: number
    quotedPaymentInfo: number
    quotedStickerData: number
    reactions: number
    revokeMessageTimestamp: number
    starred: number
    status: number
    statusAlreadyViewed: number
    statusPsa: number
    urlNumber: number
    urlText: number
    userReceipt: number
    verifiedBizName: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    pkId?: true
    bizPrivacyStatus?: true
    duration?: true
    ephemeralDuration?: true
    ephemeralStartTimestamp?: true
    messageC2STimestamp?: true
    messageStubType?: true
    messageTimestamp?: true
    revokeMessageTimestamp?: true
    status?: true
  }

  export type MessageSumAggregateInputType = {
    pkId?: true
    bizPrivacyStatus?: true
    duration?: true
    ephemeralDuration?: true
    ephemeralStartTimestamp?: true
    messageC2STimestamp?: true
    messageStubType?: true
    messageTimestamp?: true
    revokeMessageTimestamp?: true
    status?: true
  }

  export type MessageMinAggregateInputType = {
    pkId?: true
    sessionId?: true
    remoteJid?: true
    id?: true
    agentId?: true
    bizPrivacyStatus?: true
    broadcast?: true
    clearMedia?: true
    duration?: true
    ephemeralDuration?: true
    ephemeralOffToOn?: true
    ephemeralOutOfSync?: true
    ephemeralStartTimestamp?: true
    futureproofData?: true
    ignore?: true
    mediaCiphertextSha256?: true
    messageC2STimestamp?: true
    messageSecret?: true
    messageStubType?: true
    messageTimestamp?: true
    multicast?: true
    originalSelfAuthorUserJidString?: true
    participant?: true
    pushName?: true
    revokeMessageTimestamp?: true
    starred?: true
    status?: true
    statusAlreadyViewed?: true
    urlNumber?: true
    urlText?: true
    verifiedBizName?: true
  }

  export type MessageMaxAggregateInputType = {
    pkId?: true
    sessionId?: true
    remoteJid?: true
    id?: true
    agentId?: true
    bizPrivacyStatus?: true
    broadcast?: true
    clearMedia?: true
    duration?: true
    ephemeralDuration?: true
    ephemeralOffToOn?: true
    ephemeralOutOfSync?: true
    ephemeralStartTimestamp?: true
    futureproofData?: true
    ignore?: true
    mediaCiphertextSha256?: true
    messageC2STimestamp?: true
    messageSecret?: true
    messageStubType?: true
    messageTimestamp?: true
    multicast?: true
    originalSelfAuthorUserJidString?: true
    participant?: true
    pushName?: true
    revokeMessageTimestamp?: true
    starred?: true
    status?: true
    statusAlreadyViewed?: true
    urlNumber?: true
    urlText?: true
    verifiedBizName?: true
  }

  export type MessageCountAggregateInputType = {
    pkId?: true
    sessionId?: true
    remoteJid?: true
    id?: true
    agentId?: true
    bizPrivacyStatus?: true
    broadcast?: true
    clearMedia?: true
    duration?: true
    ephemeralDuration?: true
    ephemeralOffToOn?: true
    ephemeralOutOfSync?: true
    ephemeralStartTimestamp?: true
    finalLiveLocation?: true
    futureproofData?: true
    ignore?: true
    keepInChat?: true
    key?: true
    labels?: true
    mediaCiphertextSha256?: true
    mediaData?: true
    message?: true
    messageC2STimestamp?: true
    messageSecret?: true
    messageStubParameters?: true
    messageStubType?: true
    messageTimestamp?: true
    multicast?: true
    originalSelfAuthorUserJidString?: true
    participant?: true
    paymentInfo?: true
    photoChange?: true
    pollAdditionalMetadata?: true
    pollUpdates?: true
    pushName?: true
    quotedPaymentInfo?: true
    quotedStickerData?: true
    reactions?: true
    revokeMessageTimestamp?: true
    starred?: true
    status?: true
    statusAlreadyViewed?: true
    statusPsa?: true
    urlNumber?: true
    urlText?: true
    userReceipt?: true
    verifiedBizName?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: Enumerable<MessageOrderByWithAggregationInput>
    by: MessageScalarFieldEnum[]
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }


  export type MessageGroupByOutputType = {
    pkId: number
    sessionId: string
    remoteJid: string
    id: string
    agentId: string | null
    bizPrivacyStatus: number | null
    broadcast: boolean | null
    clearMedia: boolean | null
    duration: number | null
    ephemeralDuration: number | null
    ephemeralOffToOn: boolean | null
    ephemeralOutOfSync: boolean | null
    ephemeralStartTimestamp: bigint | null
    finalLiveLocation: JsonValue | null
    futureproofData: Buffer | null
    ignore: boolean | null
    keepInChat: JsonValue | null
    key: JsonValue
    labels: JsonValue | null
    mediaCiphertextSha256: Buffer | null
    mediaData: JsonValue | null
    message: JsonValue | null
    messageC2STimestamp: bigint | null
    messageSecret: Buffer | null
    messageStubParameters: JsonValue | null
    messageStubType: number | null
    messageTimestamp: bigint | null
    multicast: boolean | null
    originalSelfAuthorUserJidString: string | null
    participant: string | null
    paymentInfo: JsonValue | null
    photoChange: JsonValue | null
    pollAdditionalMetadata: JsonValue | null
    pollUpdates: JsonValue | null
    pushName: string | null
    quotedPaymentInfo: JsonValue | null
    quotedStickerData: JsonValue | null
    reactions: JsonValue | null
    revokeMessageTimestamp: bigint | null
    starred: boolean | null
    status: number | null
    statusAlreadyViewed: boolean | null
    statusPsa: JsonValue | null
    urlNumber: boolean | null
    urlText: boolean | null
    userReceipt: JsonValue | null
    verifiedBizName: string | null
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pkId?: boolean
    sessionId?: boolean
    remoteJid?: boolean
    id?: boolean
    agentId?: boolean
    bizPrivacyStatus?: boolean
    broadcast?: boolean
    clearMedia?: boolean
    duration?: boolean
    ephemeralDuration?: boolean
    ephemeralOffToOn?: boolean
    ephemeralOutOfSync?: boolean
    ephemeralStartTimestamp?: boolean
    finalLiveLocation?: boolean
    futureproofData?: boolean
    ignore?: boolean
    keepInChat?: boolean
    key?: boolean
    labels?: boolean
    mediaCiphertextSha256?: boolean
    mediaData?: boolean
    message?: boolean
    messageC2STimestamp?: boolean
    messageSecret?: boolean
    messageStubParameters?: boolean
    messageStubType?: boolean
    messageTimestamp?: boolean
    multicast?: boolean
    originalSelfAuthorUserJidString?: boolean
    participant?: boolean
    paymentInfo?: boolean
    photoChange?: boolean
    pollAdditionalMetadata?: boolean
    pollUpdates?: boolean
    pushName?: boolean
    quotedPaymentInfo?: boolean
    quotedStickerData?: boolean
    reactions?: boolean
    revokeMessageTimestamp?: boolean
    starred?: boolean
    status?: boolean
    statusAlreadyViewed?: boolean
    statusPsa?: boolean
    urlNumber?: boolean
    urlText?: boolean
    userReceipt?: boolean
    verifiedBizName?: boolean
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    pkId?: boolean
    sessionId?: boolean
    remoteJid?: boolean
    id?: boolean
    agentId?: boolean
    bizPrivacyStatus?: boolean
    broadcast?: boolean
    clearMedia?: boolean
    duration?: boolean
    ephemeralDuration?: boolean
    ephemeralOffToOn?: boolean
    ephemeralOutOfSync?: boolean
    ephemeralStartTimestamp?: boolean
    finalLiveLocation?: boolean
    futureproofData?: boolean
    ignore?: boolean
    keepInChat?: boolean
    key?: boolean
    labels?: boolean
    mediaCiphertextSha256?: boolean
    mediaData?: boolean
    message?: boolean
    messageC2STimestamp?: boolean
    messageSecret?: boolean
    messageStubParameters?: boolean
    messageStubType?: boolean
    messageTimestamp?: boolean
    multicast?: boolean
    originalSelfAuthorUserJidString?: boolean
    participant?: boolean
    paymentInfo?: boolean
    photoChange?: boolean
    pollAdditionalMetadata?: boolean
    pollUpdates?: boolean
    pushName?: boolean
    quotedPaymentInfo?: boolean
    quotedStickerData?: boolean
    reactions?: boolean
    revokeMessageTimestamp?: boolean
    starred?: boolean
    status?: boolean
    statusAlreadyViewed?: boolean
    statusPsa?: boolean
    urlNumber?: boolean
    urlText?: boolean
    userReceipt?: boolean
    verifiedBizName?: boolean
  }


  type MessageGetPayload<S extends boolean | null | undefined | MessageArgs> = $Types.GetResult<MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessageFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Message'> extends True ? Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessageFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Message'> extends True ? Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `pkId`
     * const messageWithPkIdOnly = await prisma.message.findMany({ select: { pkId: true } })
     * 
    **/
    findMany<T extends MessageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
    **/
    create<T extends MessageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageCreateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Messages.
     *     @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     *     @example
     *     // Create many Messages
     *     const message = await prisma.message.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
    **/
    delete<T extends MessageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
    **/
    upsert<T extends MessageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Message base type for findUnique actions
   */
  export type MessageFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUnique
   */
  export interface MessageFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends MessageFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message base type for findFirst actions
   */
  export type MessageFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: Enumerable<MessageScalarFieldEnum>
  }

  /**
   * Message findFirst
   */
  export interface MessageFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends MessageFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }


  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: Enumerable<MessageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }


  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }


  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }


  /**
   * Message without action
   */
  export type MessageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    pkId: number | null
  }

  export type SessionSumAggregateOutputType = {
    pkId: number | null
  }

  export type SessionMinAggregateOutputType = {
    pkId: number | null
    sessionId: string | null
    id: string | null
    data: string | null
  }

  export type SessionMaxAggregateOutputType = {
    pkId: number | null
    sessionId: string | null
    id: string | null
    data: string | null
  }

  export type SessionCountAggregateOutputType = {
    pkId: number
    sessionId: number
    id: number
    data: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    pkId?: true
  }

  export type SessionSumAggregateInputType = {
    pkId?: true
  }

  export type SessionMinAggregateInputType = {
    pkId?: true
    sessionId?: true
    id?: true
    data?: true
  }

  export type SessionMaxAggregateInputType = {
    pkId?: true
    sessionId?: true
    id?: true
    data?: true
  }

  export type SessionCountAggregateInputType = {
    pkId?: true
    sessionId?: true
    id?: true
    data?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: SessionScalarFieldEnum[]
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    pkId: number
    sessionId: string
    id: string
    data: string
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pkId?: boolean
    sessionId?: boolean
    id?: boolean
    data?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    pkId?: boolean
    sessionId?: boolean
    id?: boolean
    data?: boolean
  }


  type SessionGetPayload<S extends boolean | null | undefined | SessionArgs> = $Types.GetResult<SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `pkId`
     * const sessionWithPkIdOnly = await prisma.session.findMany({ select: { pkId: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionCreateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Session base type for findUnique actions
   */
  export type SessionFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUnique
   */
  export interface SessionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SessionFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session base type for findFirst actions
   */
  export type SessionFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }

  /**
   * Session findFirst
   */
  export interface SessionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SessionFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
  }



  /**
   * Model ChatIncoming
   */


  export type AggregateChatIncoming = {
    _count: ChatIncomingCountAggregateOutputType | null
    _avg: ChatIncomingAvgAggregateOutputType | null
    _sum: ChatIncomingSumAggregateOutputType | null
    _min: ChatIncomingMinAggregateOutputType | null
    _max: ChatIncomingMaxAggregateOutputType | null
  }

  export type ChatIncomingAvgAggregateOutputType = {
    pkId: number | null
  }

  export type ChatIncomingSumAggregateOutputType = {
    pkId: number | null
  }

  export type ChatIncomingMinAggregateOutputType = {
    pkId: number | null
    id: string | null
    sessionId: string | null
    remoteJid: string | null
    message: string | null
    pushName: string | null
    createdAt: Date | null
  }

  export type ChatIncomingMaxAggregateOutputType = {
    pkId: number | null
    id: string | null
    sessionId: string | null
    remoteJid: string | null
    message: string | null
    pushName: string | null
    createdAt: Date | null
  }

  export type ChatIncomingCountAggregateOutputType = {
    pkId: number
    id: number
    sessionId: number
    remoteJid: number
    message: number
    pushName: number
    createdAt: number
    _all: number
  }


  export type ChatIncomingAvgAggregateInputType = {
    pkId?: true
  }

  export type ChatIncomingSumAggregateInputType = {
    pkId?: true
  }

  export type ChatIncomingMinAggregateInputType = {
    pkId?: true
    id?: true
    sessionId?: true
    remoteJid?: true
    message?: true
    pushName?: true
    createdAt?: true
  }

  export type ChatIncomingMaxAggregateInputType = {
    pkId?: true
    id?: true
    sessionId?: true
    remoteJid?: true
    message?: true
    pushName?: true
    createdAt?: true
  }

  export type ChatIncomingCountAggregateInputType = {
    pkId?: true
    id?: true
    sessionId?: true
    remoteJid?: true
    message?: true
    pushName?: true
    createdAt?: true
    _all?: true
  }

  export type ChatIncomingAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatIncoming to aggregate.
     */
    where?: ChatIncomingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatIncomings to fetch.
     */
    orderBy?: Enumerable<ChatIncomingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatIncomingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatIncomings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatIncomings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatIncomings
    **/
    _count?: true | ChatIncomingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatIncomingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatIncomingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatIncomingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatIncomingMaxAggregateInputType
  }

  export type GetChatIncomingAggregateType<T extends ChatIncomingAggregateArgs> = {
        [P in keyof T & keyof AggregateChatIncoming]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatIncoming[P]>
      : GetScalarType<T[P], AggregateChatIncoming[P]>
  }




  export type ChatIncomingGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChatIncomingWhereInput
    orderBy?: Enumerable<ChatIncomingOrderByWithAggregationInput>
    by: ChatIncomingScalarFieldEnum[]
    having?: ChatIncomingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatIncomingCountAggregateInputType | true
    _avg?: ChatIncomingAvgAggregateInputType
    _sum?: ChatIncomingSumAggregateInputType
    _min?: ChatIncomingMinAggregateInputType
    _max?: ChatIncomingMaxAggregateInputType
  }


  export type ChatIncomingGroupByOutputType = {
    pkId: number
    id: string
    sessionId: string
    remoteJid: string
    message: string
    pushName: string | null
    createdAt: Date
    _count: ChatIncomingCountAggregateOutputType | null
    _avg: ChatIncomingAvgAggregateOutputType | null
    _sum: ChatIncomingSumAggregateOutputType | null
    _min: ChatIncomingMinAggregateOutputType | null
    _max: ChatIncomingMaxAggregateOutputType | null
  }

  type GetChatIncomingGroupByPayload<T extends ChatIncomingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChatIncomingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatIncomingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatIncomingGroupByOutputType[P]>
            : GetScalarType<T[P], ChatIncomingGroupByOutputType[P]>
        }
      >
    >


  export type ChatIncomingSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pkId?: boolean
    id?: boolean
    sessionId?: boolean
    remoteJid?: boolean
    message?: boolean
    pushName?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["chatIncoming"]>

  export type ChatIncomingSelectScalar = {
    pkId?: boolean
    id?: boolean
    sessionId?: boolean
    remoteJid?: boolean
    message?: boolean
    pushName?: boolean
    createdAt?: boolean
  }


  type ChatIncomingGetPayload<S extends boolean | null | undefined | ChatIncomingArgs> = $Types.GetResult<ChatIncomingPayload, S>

  type ChatIncomingCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ChatIncomingFindManyArgs, 'select' | 'include'> & {
      select?: ChatIncomingCountAggregateInputType | true
    }

  export interface ChatIncomingDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatIncoming'], meta: { name: 'ChatIncoming' } }
    /**
     * Find zero or one ChatIncoming that matches the filter.
     * @param {ChatIncomingFindUniqueArgs} args - Arguments to find a ChatIncoming
     * @example
     * // Get one ChatIncoming
     * const chatIncoming = await prisma.chatIncoming.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChatIncomingFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChatIncomingFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ChatIncoming'> extends True ? Prisma__ChatIncomingClient<$Types.GetResult<ChatIncomingPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ChatIncomingClient<$Types.GetResult<ChatIncomingPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ChatIncoming that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChatIncomingFindUniqueOrThrowArgs} args - Arguments to find a ChatIncoming
     * @example
     * // Get one ChatIncoming
     * const chatIncoming = await prisma.chatIncoming.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChatIncomingFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatIncomingFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChatIncomingClient<$Types.GetResult<ChatIncomingPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ChatIncoming that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatIncomingFindFirstArgs} args - Arguments to find a ChatIncoming
     * @example
     * // Get one ChatIncoming
     * const chatIncoming = await prisma.chatIncoming.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChatIncomingFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChatIncomingFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ChatIncoming'> extends True ? Prisma__ChatIncomingClient<$Types.GetResult<ChatIncomingPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ChatIncomingClient<$Types.GetResult<ChatIncomingPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ChatIncoming that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatIncomingFindFirstOrThrowArgs} args - Arguments to find a ChatIncoming
     * @example
     * // Get one ChatIncoming
     * const chatIncoming = await prisma.chatIncoming.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChatIncomingFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatIncomingFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChatIncomingClient<$Types.GetResult<ChatIncomingPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ChatIncomings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatIncomingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatIncomings
     * const chatIncomings = await prisma.chatIncoming.findMany()
     * 
     * // Get first 10 ChatIncomings
     * const chatIncomings = await prisma.chatIncoming.findMany({ take: 10 })
     * 
     * // Only select the `pkId`
     * const chatIncomingWithPkIdOnly = await prisma.chatIncoming.findMany({ select: { pkId: true } })
     * 
    **/
    findMany<T extends ChatIncomingFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatIncomingFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ChatIncomingPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ChatIncoming.
     * @param {ChatIncomingCreateArgs} args - Arguments to create a ChatIncoming.
     * @example
     * // Create one ChatIncoming
     * const ChatIncoming = await prisma.chatIncoming.create({
     *   data: {
     *     // ... data to create a ChatIncoming
     *   }
     * })
     * 
    **/
    create<T extends ChatIncomingCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatIncomingCreateArgs<ExtArgs>>
    ): Prisma__ChatIncomingClient<$Types.GetResult<ChatIncomingPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ChatIncomings.
     *     @param {ChatIncomingCreateManyArgs} args - Arguments to create many ChatIncomings.
     *     @example
     *     // Create many ChatIncomings
     *     const chatIncoming = await prisma.chatIncoming.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChatIncomingCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatIncomingCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChatIncoming.
     * @param {ChatIncomingDeleteArgs} args - Arguments to delete one ChatIncoming.
     * @example
     * // Delete one ChatIncoming
     * const ChatIncoming = await prisma.chatIncoming.delete({
     *   where: {
     *     // ... filter to delete one ChatIncoming
     *   }
     * })
     * 
    **/
    delete<T extends ChatIncomingDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChatIncomingDeleteArgs<ExtArgs>>
    ): Prisma__ChatIncomingClient<$Types.GetResult<ChatIncomingPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ChatIncoming.
     * @param {ChatIncomingUpdateArgs} args - Arguments to update one ChatIncoming.
     * @example
     * // Update one ChatIncoming
     * const chatIncoming = await prisma.chatIncoming.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChatIncomingUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatIncomingUpdateArgs<ExtArgs>>
    ): Prisma__ChatIncomingClient<$Types.GetResult<ChatIncomingPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ChatIncomings.
     * @param {ChatIncomingDeleteManyArgs} args - Arguments to filter ChatIncomings to delete.
     * @example
     * // Delete a few ChatIncomings
     * const { count } = await prisma.chatIncoming.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChatIncomingDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatIncomingDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatIncomings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatIncomingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatIncomings
     * const chatIncoming = await prisma.chatIncoming.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChatIncomingUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChatIncomingUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatIncoming.
     * @param {ChatIncomingUpsertArgs} args - Arguments to update or create a ChatIncoming.
     * @example
     * // Update or create a ChatIncoming
     * const chatIncoming = await prisma.chatIncoming.upsert({
     *   create: {
     *     // ... data to create a ChatIncoming
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatIncoming we want to update
     *   }
     * })
    **/
    upsert<T extends ChatIncomingUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChatIncomingUpsertArgs<ExtArgs>>
    ): Prisma__ChatIncomingClient<$Types.GetResult<ChatIncomingPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ChatIncomings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatIncomingCountArgs} args - Arguments to filter ChatIncomings to count.
     * @example
     * // Count the number of ChatIncomings
     * const count = await prisma.chatIncoming.count({
     *   where: {
     *     // ... the filter for the ChatIncomings we want to count
     *   }
     * })
    **/
    count<T extends ChatIncomingCountArgs>(
      args?: Subset<T, ChatIncomingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatIncomingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatIncoming.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatIncomingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatIncomingAggregateArgs>(args: Subset<T, ChatIncomingAggregateArgs>): Prisma.PrismaPromise<GetChatIncomingAggregateType<T>>

    /**
     * Group by ChatIncoming.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatIncomingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatIncomingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatIncomingGroupByArgs['orderBy'] }
        : { orderBy?: ChatIncomingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatIncomingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatIncomingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatIncoming.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChatIncomingClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ChatIncoming base type for findUnique actions
   */
  export type ChatIncomingFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatIncoming
     */
    select?: ChatIncomingSelect<ExtArgs> | null
    /**
     * Filter, which ChatIncoming to fetch.
     */
    where: ChatIncomingWhereUniqueInput
  }

  /**
   * ChatIncoming findUnique
   */
  export interface ChatIncomingFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ChatIncomingFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChatIncoming findUniqueOrThrow
   */
  export type ChatIncomingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatIncoming
     */
    select?: ChatIncomingSelect<ExtArgs> | null
    /**
     * Filter, which ChatIncoming to fetch.
     */
    where: ChatIncomingWhereUniqueInput
  }


  /**
   * ChatIncoming base type for findFirst actions
   */
  export type ChatIncomingFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatIncoming
     */
    select?: ChatIncomingSelect<ExtArgs> | null
    /**
     * Filter, which ChatIncoming to fetch.
     */
    where?: ChatIncomingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatIncomings to fetch.
     */
    orderBy?: Enumerable<ChatIncomingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatIncomings.
     */
    cursor?: ChatIncomingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatIncomings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatIncomings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatIncomings.
     */
    distinct?: Enumerable<ChatIncomingScalarFieldEnum>
  }

  /**
   * ChatIncoming findFirst
   */
  export interface ChatIncomingFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ChatIncomingFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChatIncoming findFirstOrThrow
   */
  export type ChatIncomingFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatIncoming
     */
    select?: ChatIncomingSelect<ExtArgs> | null
    /**
     * Filter, which ChatIncoming to fetch.
     */
    where?: ChatIncomingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatIncomings to fetch.
     */
    orderBy?: Enumerable<ChatIncomingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatIncomings.
     */
    cursor?: ChatIncomingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatIncomings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatIncomings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatIncomings.
     */
    distinct?: Enumerable<ChatIncomingScalarFieldEnum>
  }


  /**
   * ChatIncoming findMany
   */
  export type ChatIncomingFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatIncoming
     */
    select?: ChatIncomingSelect<ExtArgs> | null
    /**
     * Filter, which ChatIncomings to fetch.
     */
    where?: ChatIncomingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatIncomings to fetch.
     */
    orderBy?: Enumerable<ChatIncomingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatIncomings.
     */
    cursor?: ChatIncomingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatIncomings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatIncomings.
     */
    skip?: number
    distinct?: Enumerable<ChatIncomingScalarFieldEnum>
  }


  /**
   * ChatIncoming create
   */
  export type ChatIncomingCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatIncoming
     */
    select?: ChatIncomingSelect<ExtArgs> | null
    /**
     * The data needed to create a ChatIncoming.
     */
    data: XOR<ChatIncomingCreateInput, ChatIncomingUncheckedCreateInput>
  }


  /**
   * ChatIncoming createMany
   */
  export type ChatIncomingCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatIncomings.
     */
    data: Enumerable<ChatIncomingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ChatIncoming update
   */
  export type ChatIncomingUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatIncoming
     */
    select?: ChatIncomingSelect<ExtArgs> | null
    /**
     * The data needed to update a ChatIncoming.
     */
    data: XOR<ChatIncomingUpdateInput, ChatIncomingUncheckedUpdateInput>
    /**
     * Choose, which ChatIncoming to update.
     */
    where: ChatIncomingWhereUniqueInput
  }


  /**
   * ChatIncoming updateMany
   */
  export type ChatIncomingUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatIncomings.
     */
    data: XOR<ChatIncomingUpdateManyMutationInput, ChatIncomingUncheckedUpdateManyInput>
    /**
     * Filter which ChatIncomings to update
     */
    where?: ChatIncomingWhereInput
  }


  /**
   * ChatIncoming upsert
   */
  export type ChatIncomingUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatIncoming
     */
    select?: ChatIncomingSelect<ExtArgs> | null
    /**
     * The filter to search for the ChatIncoming to update in case it exists.
     */
    where: ChatIncomingWhereUniqueInput
    /**
     * In case the ChatIncoming found by the `where` argument doesn't exist, create a new ChatIncoming with this data.
     */
    create: XOR<ChatIncomingCreateInput, ChatIncomingUncheckedCreateInput>
    /**
     * In case the ChatIncoming was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatIncomingUpdateInput, ChatIncomingUncheckedUpdateInput>
  }


  /**
   * ChatIncoming delete
   */
  export type ChatIncomingDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatIncoming
     */
    select?: ChatIncomingSelect<ExtArgs> | null
    /**
     * Filter which ChatIncoming to delete.
     */
    where: ChatIncomingWhereUniqueInput
  }


  /**
   * ChatIncoming deleteMany
   */
  export type ChatIncomingDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatIncomings to delete
     */
    where?: ChatIncomingWhereInput
  }


  /**
   * ChatIncoming without action
   */
  export type ChatIncomingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatIncoming
     */
    select?: ChatIncomingSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ChatScalarFieldEnum: {
    pkId: 'pkId',
    sessionId: 'sessionId',
    archived: 'archived',
    contactPrimaryIdentityKey: 'contactPrimaryIdentityKey',
    conversationTimestamp: 'conversationTimestamp',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    description: 'description',
    disappearingMode: 'disappearingMode',
    displayName: 'displayName',
    endOfHistoryTransfer: 'endOfHistoryTransfer',
    endOfHistoryTransferType: 'endOfHistoryTransferType',
    ephemeralExpiration: 'ephemeralExpiration',
    ephemeralSettingTimestamp: 'ephemeralSettingTimestamp',
    id: 'id',
    isDefaultSubgroup: 'isDefaultSubgroup',
    isParentGroup: 'isParentGroup',
    lastMsgTimestamp: 'lastMsgTimestamp',
    lidJid: 'lidJid',
    markedAsUnread: 'markedAsUnread',
    mediaVisibility: 'mediaVisibility',
    messages: 'messages',
    muteEndTime: 'muteEndTime',
    name: 'name',
    newJid: 'newJid',
    notSpam: 'notSpam',
    oldJid: 'oldJid',
    pHash: 'pHash',
    parentGroupId: 'parentGroupId',
    participant: 'participant',
    pinned: 'pinned',
    pnJid: 'pnJid',
    pnhDuplicateLidThread: 'pnhDuplicateLidThread',
    readOnly: 'readOnly',
    shareOwnPn: 'shareOwnPn',
    support: 'support',
    suspended: 'suspended',
    tcToken: 'tcToken',
    tcTokenSenderTimestamp: 'tcTokenSenderTimestamp',
    tcTokenTimestamp: 'tcTokenTimestamp',
    terminated: 'terminated',
    unreadCount: 'unreadCount',
    unreadMentionCount: 'unreadMentionCount',
    wallpaper: 'wallpaper',
    lastMessageRecvTimestamp: 'lastMessageRecvTimestamp'
  };

  export type ChatScalarFieldEnum = (typeof ChatScalarFieldEnum)[keyof typeof ChatScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    pkId: 'pkId',
    sessionId: 'sessionId',
    id: 'id',
    name: 'name',
    notify: 'notify',
    verifiedName: 'verifiedName',
    imgUrl: 'imgUrl',
    status: 'status'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const GroupMetadataScalarFieldEnum: {
    pkId: 'pkId',
    sessionId: 'sessionId',
    id: 'id',
    owner: 'owner',
    subject: 'subject',
    subjectOwner: 'subjectOwner',
    subjectTime: 'subjectTime',
    creation: 'creation',
    desc: 'desc',
    descOwner: 'descOwner',
    descId: 'descId',
    restrict: 'restrict',
    announce: 'announce',
    size: 'size',
    participants: 'participants',
    ephemeralDuration: 'ephemeralDuration',
    inviteCode: 'inviteCode'
  };

  export type GroupMetadataScalarFieldEnum = (typeof GroupMetadataScalarFieldEnum)[keyof typeof GroupMetadataScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    pkId: 'pkId',
    sessionId: 'sessionId',
    remoteJid: 'remoteJid',
    id: 'id',
    agentId: 'agentId',
    bizPrivacyStatus: 'bizPrivacyStatus',
    broadcast: 'broadcast',
    clearMedia: 'clearMedia',
    duration: 'duration',
    ephemeralDuration: 'ephemeralDuration',
    ephemeralOffToOn: 'ephemeralOffToOn',
    ephemeralOutOfSync: 'ephemeralOutOfSync',
    ephemeralStartTimestamp: 'ephemeralStartTimestamp',
    finalLiveLocation: 'finalLiveLocation',
    futureproofData: 'futureproofData',
    ignore: 'ignore',
    keepInChat: 'keepInChat',
    key: 'key',
    labels: 'labels',
    mediaCiphertextSha256: 'mediaCiphertextSha256',
    mediaData: 'mediaData',
    message: 'message',
    messageC2STimestamp: 'messageC2STimestamp',
    messageSecret: 'messageSecret',
    messageStubParameters: 'messageStubParameters',
    messageStubType: 'messageStubType',
    messageTimestamp: 'messageTimestamp',
    multicast: 'multicast',
    originalSelfAuthorUserJidString: 'originalSelfAuthorUserJidString',
    participant: 'participant',
    paymentInfo: 'paymentInfo',
    photoChange: 'photoChange',
    pollAdditionalMetadata: 'pollAdditionalMetadata',
    pollUpdates: 'pollUpdates',
    pushName: 'pushName',
    quotedPaymentInfo: 'quotedPaymentInfo',
    quotedStickerData: 'quotedStickerData',
    reactions: 'reactions',
    revokeMessageTimestamp: 'revokeMessageTimestamp',
    starred: 'starred',
    status: 'status',
    statusAlreadyViewed: 'statusAlreadyViewed',
    statusPsa: 'statusPsa',
    urlNumber: 'urlNumber',
    urlText: 'urlText',
    userReceipt: 'userReceipt',
    verifiedBizName: 'verifiedBizName'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    pkId: 'pkId',
    sessionId: 'sessionId',
    id: 'id',
    data: 'data'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const ChatIncomingScalarFieldEnum: {
    pkId: 'pkId',
    id: 'id',
    sessionId: 'sessionId',
    remoteJid: 'remoteJid',
    message: 'message',
    pushName: 'pushName',
    createdAt: 'createdAt'
  };

  export type ChatIncomingScalarFieldEnum = (typeof ChatIncomingScalarFieldEnum)[keyof typeof ChatIncomingScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type ChatWhereInput = {
    AND?: Enumerable<ChatWhereInput>
    OR?: Enumerable<ChatWhereInput>
    NOT?: Enumerable<ChatWhereInput>
    pkId?: IntFilter | number
    sessionId?: StringFilter | string
    archived?: BoolNullableFilter | boolean | null
    contactPrimaryIdentityKey?: BytesNullableFilter | Buffer | null
    conversationTimestamp?: BigIntNullableFilter | bigint | number | null
    createdAt?: BigIntNullableFilter | bigint | number | null
    createdBy?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    disappearingMode?: JsonNullableFilter
    displayName?: StringNullableFilter | string | null
    endOfHistoryTransfer?: BoolNullableFilter | boolean | null
    endOfHistoryTransferType?: IntNullableFilter | number | null
    ephemeralExpiration?: IntNullableFilter | number | null
    ephemeralSettingTimestamp?: BigIntNullableFilter | bigint | number | null
    id?: StringFilter | string
    isDefaultSubgroup?: BoolNullableFilter | boolean | null
    isParentGroup?: BoolNullableFilter | boolean | null
    lastMsgTimestamp?: BigIntNullableFilter | bigint | number | null
    lidJid?: StringNullableFilter | string | null
    markedAsUnread?: BoolNullableFilter | boolean | null
    mediaVisibility?: IntNullableFilter | number | null
    messages?: JsonNullableFilter
    muteEndTime?: BigIntNullableFilter | bigint | number | null
    name?: StringNullableFilter | string | null
    newJid?: StringNullableFilter | string | null
    notSpam?: BoolNullableFilter | boolean | null
    oldJid?: StringNullableFilter | string | null
    pHash?: StringNullableFilter | string | null
    parentGroupId?: StringNullableFilter | string | null
    participant?: JsonNullableFilter
    pinned?: IntNullableFilter | number | null
    pnJid?: StringNullableFilter | string | null
    pnhDuplicateLidThread?: BoolNullableFilter | boolean | null
    readOnly?: BoolNullableFilter | boolean | null
    shareOwnPn?: BoolNullableFilter | boolean | null
    support?: BoolNullableFilter | boolean | null
    suspended?: BoolNullableFilter | boolean | null
    tcToken?: BytesNullableFilter | Buffer | null
    tcTokenSenderTimestamp?: BigIntNullableFilter | bigint | number | null
    tcTokenTimestamp?: BigIntNullableFilter | bigint | number | null
    terminated?: BoolNullableFilter | boolean | null
    unreadCount?: IntNullableFilter | number | null
    unreadMentionCount?: IntNullableFilter | number | null
    wallpaper?: JsonNullableFilter
    lastMessageRecvTimestamp?: IntNullableFilter | number | null
  }

  export type ChatOrderByWithRelationInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    archived?: SortOrderInput | SortOrder
    contactPrimaryIdentityKey?: SortOrderInput | SortOrder
    conversationTimestamp?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    disappearingMode?: SortOrderInput | SortOrder
    displayName?: SortOrderInput | SortOrder
    endOfHistoryTransfer?: SortOrderInput | SortOrder
    endOfHistoryTransferType?: SortOrderInput | SortOrder
    ephemeralExpiration?: SortOrderInput | SortOrder
    ephemeralSettingTimestamp?: SortOrderInput | SortOrder
    id?: SortOrder
    isDefaultSubgroup?: SortOrderInput | SortOrder
    isParentGroup?: SortOrderInput | SortOrder
    lastMsgTimestamp?: SortOrderInput | SortOrder
    lidJid?: SortOrderInput | SortOrder
    markedAsUnread?: SortOrderInput | SortOrder
    mediaVisibility?: SortOrderInput | SortOrder
    messages?: SortOrderInput | SortOrder
    muteEndTime?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    newJid?: SortOrderInput | SortOrder
    notSpam?: SortOrderInput | SortOrder
    oldJid?: SortOrderInput | SortOrder
    pHash?: SortOrderInput | SortOrder
    parentGroupId?: SortOrderInput | SortOrder
    participant?: SortOrderInput | SortOrder
    pinned?: SortOrderInput | SortOrder
    pnJid?: SortOrderInput | SortOrder
    pnhDuplicateLidThread?: SortOrderInput | SortOrder
    readOnly?: SortOrderInput | SortOrder
    shareOwnPn?: SortOrderInput | SortOrder
    support?: SortOrderInput | SortOrder
    suspended?: SortOrderInput | SortOrder
    tcToken?: SortOrderInput | SortOrder
    tcTokenSenderTimestamp?: SortOrderInput | SortOrder
    tcTokenTimestamp?: SortOrderInput | SortOrder
    terminated?: SortOrderInput | SortOrder
    unreadCount?: SortOrderInput | SortOrder
    unreadMentionCount?: SortOrderInput | SortOrder
    wallpaper?: SortOrderInput | SortOrder
    lastMessageRecvTimestamp?: SortOrderInput | SortOrder
  }

  export type ChatWhereUniqueInput = {
    pkId?: number
    sessionId_id?: ChatSessionIdIdCompoundUniqueInput
  }

  export type ChatOrderByWithAggregationInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    archived?: SortOrderInput | SortOrder
    contactPrimaryIdentityKey?: SortOrderInput | SortOrder
    conversationTimestamp?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    disappearingMode?: SortOrderInput | SortOrder
    displayName?: SortOrderInput | SortOrder
    endOfHistoryTransfer?: SortOrderInput | SortOrder
    endOfHistoryTransferType?: SortOrderInput | SortOrder
    ephemeralExpiration?: SortOrderInput | SortOrder
    ephemeralSettingTimestamp?: SortOrderInput | SortOrder
    id?: SortOrder
    isDefaultSubgroup?: SortOrderInput | SortOrder
    isParentGroup?: SortOrderInput | SortOrder
    lastMsgTimestamp?: SortOrderInput | SortOrder
    lidJid?: SortOrderInput | SortOrder
    markedAsUnread?: SortOrderInput | SortOrder
    mediaVisibility?: SortOrderInput | SortOrder
    messages?: SortOrderInput | SortOrder
    muteEndTime?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    newJid?: SortOrderInput | SortOrder
    notSpam?: SortOrderInput | SortOrder
    oldJid?: SortOrderInput | SortOrder
    pHash?: SortOrderInput | SortOrder
    parentGroupId?: SortOrderInput | SortOrder
    participant?: SortOrderInput | SortOrder
    pinned?: SortOrderInput | SortOrder
    pnJid?: SortOrderInput | SortOrder
    pnhDuplicateLidThread?: SortOrderInput | SortOrder
    readOnly?: SortOrderInput | SortOrder
    shareOwnPn?: SortOrderInput | SortOrder
    support?: SortOrderInput | SortOrder
    suspended?: SortOrderInput | SortOrder
    tcToken?: SortOrderInput | SortOrder
    tcTokenSenderTimestamp?: SortOrderInput | SortOrder
    tcTokenTimestamp?: SortOrderInput | SortOrder
    terminated?: SortOrderInput | SortOrder
    unreadCount?: SortOrderInput | SortOrder
    unreadMentionCount?: SortOrderInput | SortOrder
    wallpaper?: SortOrderInput | SortOrder
    lastMessageRecvTimestamp?: SortOrderInput | SortOrder
    _count?: ChatCountOrderByAggregateInput
    _avg?: ChatAvgOrderByAggregateInput
    _max?: ChatMaxOrderByAggregateInput
    _min?: ChatMinOrderByAggregateInput
    _sum?: ChatSumOrderByAggregateInput
  }

  export type ChatScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChatScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChatScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChatScalarWhereWithAggregatesInput>
    pkId?: IntWithAggregatesFilter | number
    sessionId?: StringWithAggregatesFilter | string
    archived?: BoolNullableWithAggregatesFilter | boolean | null
    contactPrimaryIdentityKey?: BytesNullableWithAggregatesFilter | Buffer | null
    conversationTimestamp?: BigIntNullableWithAggregatesFilter | bigint | number | null
    createdAt?: BigIntNullableWithAggregatesFilter | bigint | number | null
    createdBy?: StringNullableWithAggregatesFilter | string | null
    description?: StringNullableWithAggregatesFilter | string | null
    disappearingMode?: JsonNullableWithAggregatesFilter
    displayName?: StringNullableWithAggregatesFilter | string | null
    endOfHistoryTransfer?: BoolNullableWithAggregatesFilter | boolean | null
    endOfHistoryTransferType?: IntNullableWithAggregatesFilter | number | null
    ephemeralExpiration?: IntNullableWithAggregatesFilter | number | null
    ephemeralSettingTimestamp?: BigIntNullableWithAggregatesFilter | bigint | number | null
    id?: StringWithAggregatesFilter | string
    isDefaultSubgroup?: BoolNullableWithAggregatesFilter | boolean | null
    isParentGroup?: BoolNullableWithAggregatesFilter | boolean | null
    lastMsgTimestamp?: BigIntNullableWithAggregatesFilter | bigint | number | null
    lidJid?: StringNullableWithAggregatesFilter | string | null
    markedAsUnread?: BoolNullableWithAggregatesFilter | boolean | null
    mediaVisibility?: IntNullableWithAggregatesFilter | number | null
    messages?: JsonNullableWithAggregatesFilter
    muteEndTime?: BigIntNullableWithAggregatesFilter | bigint | number | null
    name?: StringNullableWithAggregatesFilter | string | null
    newJid?: StringNullableWithAggregatesFilter | string | null
    notSpam?: BoolNullableWithAggregatesFilter | boolean | null
    oldJid?: StringNullableWithAggregatesFilter | string | null
    pHash?: StringNullableWithAggregatesFilter | string | null
    parentGroupId?: StringNullableWithAggregatesFilter | string | null
    participant?: JsonNullableWithAggregatesFilter
    pinned?: IntNullableWithAggregatesFilter | number | null
    pnJid?: StringNullableWithAggregatesFilter | string | null
    pnhDuplicateLidThread?: BoolNullableWithAggregatesFilter | boolean | null
    readOnly?: BoolNullableWithAggregatesFilter | boolean | null
    shareOwnPn?: BoolNullableWithAggregatesFilter | boolean | null
    support?: BoolNullableWithAggregatesFilter | boolean | null
    suspended?: BoolNullableWithAggregatesFilter | boolean | null
    tcToken?: BytesNullableWithAggregatesFilter | Buffer | null
    tcTokenSenderTimestamp?: BigIntNullableWithAggregatesFilter | bigint | number | null
    tcTokenTimestamp?: BigIntNullableWithAggregatesFilter | bigint | number | null
    terminated?: BoolNullableWithAggregatesFilter | boolean | null
    unreadCount?: IntNullableWithAggregatesFilter | number | null
    unreadMentionCount?: IntNullableWithAggregatesFilter | number | null
    wallpaper?: JsonNullableWithAggregatesFilter
    lastMessageRecvTimestamp?: IntNullableWithAggregatesFilter | number | null
  }

  export type ContactWhereInput = {
    AND?: Enumerable<ContactWhereInput>
    OR?: Enumerable<ContactWhereInput>
    NOT?: Enumerable<ContactWhereInput>
    pkId?: IntFilter | number
    sessionId?: StringFilter | string
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    notify?: StringNullableFilter | string | null
    verifiedName?: StringNullableFilter | string | null
    imgUrl?: StringNullableFilter | string | null
    status?: StringNullableFilter | string | null
  }

  export type ContactOrderByWithRelationInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    notify?: SortOrderInput | SortOrder
    verifiedName?: SortOrderInput | SortOrder
    imgUrl?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
  }

  export type ContactWhereUniqueInput = {
    pkId?: number
    sessionId_id?: ContactSessionIdIdCompoundUniqueInput
  }

  export type ContactOrderByWithAggregationInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    notify?: SortOrderInput | SortOrder
    verifiedName?: SortOrderInput | SortOrder
    imgUrl?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    _count?: ContactCountOrderByAggregateInput
    _avg?: ContactAvgOrderByAggregateInput
    _max?: ContactMaxOrderByAggregateInput
    _min?: ContactMinOrderByAggregateInput
    _sum?: ContactSumOrderByAggregateInput
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ContactScalarWhereWithAggregatesInput>
    OR?: Enumerable<ContactScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ContactScalarWhereWithAggregatesInput>
    pkId?: IntWithAggregatesFilter | number
    sessionId?: StringWithAggregatesFilter | string
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    notify?: StringNullableWithAggregatesFilter | string | null
    verifiedName?: StringNullableWithAggregatesFilter | string | null
    imgUrl?: StringNullableWithAggregatesFilter | string | null
    status?: StringNullableWithAggregatesFilter | string | null
  }

  export type GroupMetadataWhereInput = {
    AND?: Enumerable<GroupMetadataWhereInput>
    OR?: Enumerable<GroupMetadataWhereInput>
    NOT?: Enumerable<GroupMetadataWhereInput>
    pkId?: IntFilter | number
    sessionId?: StringFilter | string
    id?: StringFilter | string
    owner?: StringNullableFilter | string | null
    subject?: StringFilter | string
    subjectOwner?: StringNullableFilter | string | null
    subjectTime?: IntNullableFilter | number | null
    creation?: IntNullableFilter | number | null
    desc?: StringNullableFilter | string | null
    descOwner?: StringNullableFilter | string | null
    descId?: StringNullableFilter | string | null
    restrict?: BoolNullableFilter | boolean | null
    announce?: BoolNullableFilter | boolean | null
    size?: IntNullableFilter | number | null
    participants?: JsonFilter
    ephemeralDuration?: IntNullableFilter | number | null
    inviteCode?: StringNullableFilter | string | null
  }

  export type GroupMetadataOrderByWithRelationInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    id?: SortOrder
    owner?: SortOrderInput | SortOrder
    subject?: SortOrder
    subjectOwner?: SortOrderInput | SortOrder
    subjectTime?: SortOrderInput | SortOrder
    creation?: SortOrderInput | SortOrder
    desc?: SortOrderInput | SortOrder
    descOwner?: SortOrderInput | SortOrder
    descId?: SortOrderInput | SortOrder
    restrict?: SortOrderInput | SortOrder
    announce?: SortOrderInput | SortOrder
    size?: SortOrderInput | SortOrder
    participants?: SortOrder
    ephemeralDuration?: SortOrderInput | SortOrder
    inviteCode?: SortOrderInput | SortOrder
  }

  export type GroupMetadataWhereUniqueInput = {
    pkId?: number
    sessionId_id?: GroupMetadataSessionIdIdCompoundUniqueInput
  }

  export type GroupMetadataOrderByWithAggregationInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    id?: SortOrder
    owner?: SortOrderInput | SortOrder
    subject?: SortOrder
    subjectOwner?: SortOrderInput | SortOrder
    subjectTime?: SortOrderInput | SortOrder
    creation?: SortOrderInput | SortOrder
    desc?: SortOrderInput | SortOrder
    descOwner?: SortOrderInput | SortOrder
    descId?: SortOrderInput | SortOrder
    restrict?: SortOrderInput | SortOrder
    announce?: SortOrderInput | SortOrder
    size?: SortOrderInput | SortOrder
    participants?: SortOrder
    ephemeralDuration?: SortOrderInput | SortOrder
    inviteCode?: SortOrderInput | SortOrder
    _count?: GroupMetadataCountOrderByAggregateInput
    _avg?: GroupMetadataAvgOrderByAggregateInput
    _max?: GroupMetadataMaxOrderByAggregateInput
    _min?: GroupMetadataMinOrderByAggregateInput
    _sum?: GroupMetadataSumOrderByAggregateInput
  }

  export type GroupMetadataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GroupMetadataScalarWhereWithAggregatesInput>
    OR?: Enumerable<GroupMetadataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GroupMetadataScalarWhereWithAggregatesInput>
    pkId?: IntWithAggregatesFilter | number
    sessionId?: StringWithAggregatesFilter | string
    id?: StringWithAggregatesFilter | string
    owner?: StringNullableWithAggregatesFilter | string | null
    subject?: StringWithAggregatesFilter | string
    subjectOwner?: StringNullableWithAggregatesFilter | string | null
    subjectTime?: IntNullableWithAggregatesFilter | number | null
    creation?: IntNullableWithAggregatesFilter | number | null
    desc?: StringNullableWithAggregatesFilter | string | null
    descOwner?: StringNullableWithAggregatesFilter | string | null
    descId?: StringNullableWithAggregatesFilter | string | null
    restrict?: BoolNullableWithAggregatesFilter | boolean | null
    announce?: BoolNullableWithAggregatesFilter | boolean | null
    size?: IntNullableWithAggregatesFilter | number | null
    participants?: JsonWithAggregatesFilter
    ephemeralDuration?: IntNullableWithAggregatesFilter | number | null
    inviteCode?: StringNullableWithAggregatesFilter | string | null
  }

  export type MessageWhereInput = {
    AND?: Enumerable<MessageWhereInput>
    OR?: Enumerable<MessageWhereInput>
    NOT?: Enumerable<MessageWhereInput>
    pkId?: IntFilter | number
    sessionId?: StringFilter | string
    remoteJid?: StringFilter | string
    id?: StringFilter | string
    agentId?: StringNullableFilter | string | null
    bizPrivacyStatus?: IntNullableFilter | number | null
    broadcast?: BoolNullableFilter | boolean | null
    clearMedia?: BoolNullableFilter | boolean | null
    duration?: IntNullableFilter | number | null
    ephemeralDuration?: IntNullableFilter | number | null
    ephemeralOffToOn?: BoolNullableFilter | boolean | null
    ephemeralOutOfSync?: BoolNullableFilter | boolean | null
    ephemeralStartTimestamp?: BigIntNullableFilter | bigint | number | null
    finalLiveLocation?: JsonNullableFilter
    futureproofData?: BytesNullableFilter | Buffer | null
    ignore?: BoolNullableFilter | boolean | null
    keepInChat?: JsonNullableFilter
    key?: JsonFilter
    labels?: JsonNullableFilter
    mediaCiphertextSha256?: BytesNullableFilter | Buffer | null
    mediaData?: JsonNullableFilter
    message?: JsonNullableFilter
    messageC2STimestamp?: BigIntNullableFilter | bigint | number | null
    messageSecret?: BytesNullableFilter | Buffer | null
    messageStubParameters?: JsonNullableFilter
    messageStubType?: IntNullableFilter | number | null
    messageTimestamp?: BigIntNullableFilter | bigint | number | null
    multicast?: BoolNullableFilter | boolean | null
    originalSelfAuthorUserJidString?: StringNullableFilter | string | null
    participant?: StringNullableFilter | string | null
    paymentInfo?: JsonNullableFilter
    photoChange?: JsonNullableFilter
    pollAdditionalMetadata?: JsonNullableFilter
    pollUpdates?: JsonNullableFilter
    pushName?: StringNullableFilter | string | null
    quotedPaymentInfo?: JsonNullableFilter
    quotedStickerData?: JsonNullableFilter
    reactions?: JsonNullableFilter
    revokeMessageTimestamp?: BigIntNullableFilter | bigint | number | null
    starred?: BoolNullableFilter | boolean | null
    status?: IntNullableFilter | number | null
    statusAlreadyViewed?: BoolNullableFilter | boolean | null
    statusPsa?: JsonNullableFilter
    urlNumber?: BoolNullableFilter | boolean | null
    urlText?: BoolNullableFilter | boolean | null
    userReceipt?: JsonNullableFilter
    verifiedBizName?: StringNullableFilter | string | null
  }

  export type MessageOrderByWithRelationInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    remoteJid?: SortOrder
    id?: SortOrder
    agentId?: SortOrderInput | SortOrder
    bizPrivacyStatus?: SortOrderInput | SortOrder
    broadcast?: SortOrderInput | SortOrder
    clearMedia?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    ephemeralDuration?: SortOrderInput | SortOrder
    ephemeralOffToOn?: SortOrderInput | SortOrder
    ephemeralOutOfSync?: SortOrderInput | SortOrder
    ephemeralStartTimestamp?: SortOrderInput | SortOrder
    finalLiveLocation?: SortOrderInput | SortOrder
    futureproofData?: SortOrderInput | SortOrder
    ignore?: SortOrderInput | SortOrder
    keepInChat?: SortOrderInput | SortOrder
    key?: SortOrder
    labels?: SortOrderInput | SortOrder
    mediaCiphertextSha256?: SortOrderInput | SortOrder
    mediaData?: SortOrderInput | SortOrder
    message?: SortOrderInput | SortOrder
    messageC2STimestamp?: SortOrderInput | SortOrder
    messageSecret?: SortOrderInput | SortOrder
    messageStubParameters?: SortOrderInput | SortOrder
    messageStubType?: SortOrderInput | SortOrder
    messageTimestamp?: SortOrderInput | SortOrder
    multicast?: SortOrderInput | SortOrder
    originalSelfAuthorUserJidString?: SortOrderInput | SortOrder
    participant?: SortOrderInput | SortOrder
    paymentInfo?: SortOrderInput | SortOrder
    photoChange?: SortOrderInput | SortOrder
    pollAdditionalMetadata?: SortOrderInput | SortOrder
    pollUpdates?: SortOrderInput | SortOrder
    pushName?: SortOrderInput | SortOrder
    quotedPaymentInfo?: SortOrderInput | SortOrder
    quotedStickerData?: SortOrderInput | SortOrder
    reactions?: SortOrderInput | SortOrder
    revokeMessageTimestamp?: SortOrderInput | SortOrder
    starred?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    statusAlreadyViewed?: SortOrderInput | SortOrder
    statusPsa?: SortOrderInput | SortOrder
    urlNumber?: SortOrderInput | SortOrder
    urlText?: SortOrderInput | SortOrder
    userReceipt?: SortOrderInput | SortOrder
    verifiedBizName?: SortOrderInput | SortOrder
  }

  export type MessageWhereUniqueInput = {
    pkId?: number
    sessionId_remoteJid_id?: MessageSessionIdRemoteJidIdCompoundUniqueInput
  }

  export type MessageOrderByWithAggregationInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    remoteJid?: SortOrder
    id?: SortOrder
    agentId?: SortOrderInput | SortOrder
    bizPrivacyStatus?: SortOrderInput | SortOrder
    broadcast?: SortOrderInput | SortOrder
    clearMedia?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    ephemeralDuration?: SortOrderInput | SortOrder
    ephemeralOffToOn?: SortOrderInput | SortOrder
    ephemeralOutOfSync?: SortOrderInput | SortOrder
    ephemeralStartTimestamp?: SortOrderInput | SortOrder
    finalLiveLocation?: SortOrderInput | SortOrder
    futureproofData?: SortOrderInput | SortOrder
    ignore?: SortOrderInput | SortOrder
    keepInChat?: SortOrderInput | SortOrder
    key?: SortOrder
    labels?: SortOrderInput | SortOrder
    mediaCiphertextSha256?: SortOrderInput | SortOrder
    mediaData?: SortOrderInput | SortOrder
    message?: SortOrderInput | SortOrder
    messageC2STimestamp?: SortOrderInput | SortOrder
    messageSecret?: SortOrderInput | SortOrder
    messageStubParameters?: SortOrderInput | SortOrder
    messageStubType?: SortOrderInput | SortOrder
    messageTimestamp?: SortOrderInput | SortOrder
    multicast?: SortOrderInput | SortOrder
    originalSelfAuthorUserJidString?: SortOrderInput | SortOrder
    participant?: SortOrderInput | SortOrder
    paymentInfo?: SortOrderInput | SortOrder
    photoChange?: SortOrderInput | SortOrder
    pollAdditionalMetadata?: SortOrderInput | SortOrder
    pollUpdates?: SortOrderInput | SortOrder
    pushName?: SortOrderInput | SortOrder
    quotedPaymentInfo?: SortOrderInput | SortOrder
    quotedStickerData?: SortOrderInput | SortOrder
    reactions?: SortOrderInput | SortOrder
    revokeMessageTimestamp?: SortOrderInput | SortOrder
    starred?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    statusAlreadyViewed?: SortOrderInput | SortOrder
    statusPsa?: SortOrderInput | SortOrder
    urlNumber?: SortOrderInput | SortOrder
    urlText?: SortOrderInput | SortOrder
    userReceipt?: SortOrderInput | SortOrder
    verifiedBizName?: SortOrderInput | SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MessageScalarWhereWithAggregatesInput>
    OR?: Enumerable<MessageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MessageScalarWhereWithAggregatesInput>
    pkId?: IntWithAggregatesFilter | number
    sessionId?: StringWithAggregatesFilter | string
    remoteJid?: StringWithAggregatesFilter | string
    id?: StringWithAggregatesFilter | string
    agentId?: StringNullableWithAggregatesFilter | string | null
    bizPrivacyStatus?: IntNullableWithAggregatesFilter | number | null
    broadcast?: BoolNullableWithAggregatesFilter | boolean | null
    clearMedia?: BoolNullableWithAggregatesFilter | boolean | null
    duration?: IntNullableWithAggregatesFilter | number | null
    ephemeralDuration?: IntNullableWithAggregatesFilter | number | null
    ephemeralOffToOn?: BoolNullableWithAggregatesFilter | boolean | null
    ephemeralOutOfSync?: BoolNullableWithAggregatesFilter | boolean | null
    ephemeralStartTimestamp?: BigIntNullableWithAggregatesFilter | bigint | number | null
    finalLiveLocation?: JsonNullableWithAggregatesFilter
    futureproofData?: BytesNullableWithAggregatesFilter | Buffer | null
    ignore?: BoolNullableWithAggregatesFilter | boolean | null
    keepInChat?: JsonNullableWithAggregatesFilter
    key?: JsonWithAggregatesFilter
    labels?: JsonNullableWithAggregatesFilter
    mediaCiphertextSha256?: BytesNullableWithAggregatesFilter | Buffer | null
    mediaData?: JsonNullableWithAggregatesFilter
    message?: JsonNullableWithAggregatesFilter
    messageC2STimestamp?: BigIntNullableWithAggregatesFilter | bigint | number | null
    messageSecret?: BytesNullableWithAggregatesFilter | Buffer | null
    messageStubParameters?: JsonNullableWithAggregatesFilter
    messageStubType?: IntNullableWithAggregatesFilter | number | null
    messageTimestamp?: BigIntNullableWithAggregatesFilter | bigint | number | null
    multicast?: BoolNullableWithAggregatesFilter | boolean | null
    originalSelfAuthorUserJidString?: StringNullableWithAggregatesFilter | string | null
    participant?: StringNullableWithAggregatesFilter | string | null
    paymentInfo?: JsonNullableWithAggregatesFilter
    photoChange?: JsonNullableWithAggregatesFilter
    pollAdditionalMetadata?: JsonNullableWithAggregatesFilter
    pollUpdates?: JsonNullableWithAggregatesFilter
    pushName?: StringNullableWithAggregatesFilter | string | null
    quotedPaymentInfo?: JsonNullableWithAggregatesFilter
    quotedStickerData?: JsonNullableWithAggregatesFilter
    reactions?: JsonNullableWithAggregatesFilter
    revokeMessageTimestamp?: BigIntNullableWithAggregatesFilter | bigint | number | null
    starred?: BoolNullableWithAggregatesFilter | boolean | null
    status?: IntNullableWithAggregatesFilter | number | null
    statusAlreadyViewed?: BoolNullableWithAggregatesFilter | boolean | null
    statusPsa?: JsonNullableWithAggregatesFilter
    urlNumber?: BoolNullableWithAggregatesFilter | boolean | null
    urlText?: BoolNullableWithAggregatesFilter | boolean | null
    userReceipt?: JsonNullableWithAggregatesFilter
    verifiedBizName?: StringNullableWithAggregatesFilter | string | null
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    pkId?: IntFilter | number
    sessionId?: StringFilter | string
    id?: StringFilter | string
    data?: StringFilter | string
  }

  export type SessionOrderByWithRelationInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    id?: SortOrder
    data?: SortOrder
  }

  export type SessionWhereUniqueInput = {
    pkId?: number
    sessionId_id?: SessionSessionIdIdCompoundUniqueInput
  }

  export type SessionOrderByWithAggregationInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    id?: SortOrder
    data?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    pkId?: IntWithAggregatesFilter | number
    sessionId?: StringWithAggregatesFilter | string
    id?: StringWithAggregatesFilter | string
    data?: StringWithAggregatesFilter | string
  }

  export type ChatIncomingWhereInput = {
    AND?: Enumerable<ChatIncomingWhereInput>
    OR?: Enumerable<ChatIncomingWhereInput>
    NOT?: Enumerable<ChatIncomingWhereInput>
    pkId?: IntFilter | number
    id?: StringFilter | string
    sessionId?: StringFilter | string
    remoteJid?: StringFilter | string
    message?: StringFilter | string
    pushName?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
  }

  export type ChatIncomingOrderByWithRelationInput = {
    pkId?: SortOrder
    id?: SortOrder
    sessionId?: SortOrder
    remoteJid?: SortOrder
    message?: SortOrder
    pushName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type ChatIncomingWhereUniqueInput = {
    pkId?: number
    sessionId_remoteJid_id?: ChatIncomingSessionIdRemoteJidIdCompoundUniqueInput
  }

  export type ChatIncomingOrderByWithAggregationInput = {
    pkId?: SortOrder
    id?: SortOrder
    sessionId?: SortOrder
    remoteJid?: SortOrder
    message?: SortOrder
    pushName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ChatIncomingCountOrderByAggregateInput
    _avg?: ChatIncomingAvgOrderByAggregateInput
    _max?: ChatIncomingMaxOrderByAggregateInput
    _min?: ChatIncomingMinOrderByAggregateInput
    _sum?: ChatIncomingSumOrderByAggregateInput
  }

  export type ChatIncomingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChatIncomingScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChatIncomingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChatIncomingScalarWhereWithAggregatesInput>
    pkId?: IntWithAggregatesFilter | number
    id?: StringWithAggregatesFilter | string
    sessionId?: StringWithAggregatesFilter | string
    remoteJid?: StringWithAggregatesFilter | string
    message?: StringWithAggregatesFilter | string
    pushName?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ChatCreateInput = {
    sessionId: string
    archived?: boolean | null
    contactPrimaryIdentityKey?: Buffer | null
    conversationTimestamp?: bigint | number | null
    createdAt?: bigint | number | null
    createdBy?: string | null
    description?: string | null
    disappearingMode?: NullableJsonNullValueInput | InputJsonValue
    displayName?: string | null
    endOfHistoryTransfer?: boolean | null
    endOfHistoryTransferType?: number | null
    ephemeralExpiration?: number | null
    ephemeralSettingTimestamp?: bigint | number | null
    id: string
    isDefaultSubgroup?: boolean | null
    isParentGroup?: boolean | null
    lastMsgTimestamp?: bigint | number | null
    lidJid?: string | null
    markedAsUnread?: boolean | null
    mediaVisibility?: number | null
    messages?: NullableJsonNullValueInput | InputJsonValue
    muteEndTime?: bigint | number | null
    name?: string | null
    newJid?: string | null
    notSpam?: boolean | null
    oldJid?: string | null
    pHash?: string | null
    parentGroupId?: string | null
    participant?: NullableJsonNullValueInput | InputJsonValue
    pinned?: number | null
    pnJid?: string | null
    pnhDuplicateLidThread?: boolean | null
    readOnly?: boolean | null
    shareOwnPn?: boolean | null
    support?: boolean | null
    suspended?: boolean | null
    tcToken?: Buffer | null
    tcTokenSenderTimestamp?: bigint | number | null
    tcTokenTimestamp?: bigint | number | null
    terminated?: boolean | null
    unreadCount?: number | null
    unreadMentionCount?: number | null
    wallpaper?: NullableJsonNullValueInput | InputJsonValue
    lastMessageRecvTimestamp?: number | null
  }

  export type ChatUncheckedCreateInput = {
    pkId?: number
    sessionId: string
    archived?: boolean | null
    contactPrimaryIdentityKey?: Buffer | null
    conversationTimestamp?: bigint | number | null
    createdAt?: bigint | number | null
    createdBy?: string | null
    description?: string | null
    disappearingMode?: NullableJsonNullValueInput | InputJsonValue
    displayName?: string | null
    endOfHistoryTransfer?: boolean | null
    endOfHistoryTransferType?: number | null
    ephemeralExpiration?: number | null
    ephemeralSettingTimestamp?: bigint | number | null
    id: string
    isDefaultSubgroup?: boolean | null
    isParentGroup?: boolean | null
    lastMsgTimestamp?: bigint | number | null
    lidJid?: string | null
    markedAsUnread?: boolean | null
    mediaVisibility?: number | null
    messages?: NullableJsonNullValueInput | InputJsonValue
    muteEndTime?: bigint | number | null
    name?: string | null
    newJid?: string | null
    notSpam?: boolean | null
    oldJid?: string | null
    pHash?: string | null
    parentGroupId?: string | null
    participant?: NullableJsonNullValueInput | InputJsonValue
    pinned?: number | null
    pnJid?: string | null
    pnhDuplicateLidThread?: boolean | null
    readOnly?: boolean | null
    shareOwnPn?: boolean | null
    support?: boolean | null
    suspended?: boolean | null
    tcToken?: Buffer | null
    tcTokenSenderTimestamp?: bigint | number | null
    tcTokenTimestamp?: bigint | number | null
    terminated?: boolean | null
    unreadCount?: number | null
    unreadMentionCount?: number | null
    wallpaper?: NullableJsonNullValueInput | InputJsonValue
    lastMessageRecvTimestamp?: number | null
  }

  export type ChatUpdateInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    contactPrimaryIdentityKey?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    conversationTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    disappearingMode?: NullableJsonNullValueInput | InputJsonValue
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    endOfHistoryTransfer?: NullableBoolFieldUpdateOperationsInput | boolean | null
    endOfHistoryTransferType?: NullableIntFieldUpdateOperationsInput | number | null
    ephemeralExpiration?: NullableIntFieldUpdateOperationsInput | number | null
    ephemeralSettingTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    id?: StringFieldUpdateOperationsInput | string
    isDefaultSubgroup?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isParentGroup?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lastMsgTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    lidJid?: NullableStringFieldUpdateOperationsInput | string | null
    markedAsUnread?: NullableBoolFieldUpdateOperationsInput | boolean | null
    mediaVisibility?: NullableIntFieldUpdateOperationsInput | number | null
    messages?: NullableJsonNullValueInput | InputJsonValue
    muteEndTime?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    newJid?: NullableStringFieldUpdateOperationsInput | string | null
    notSpam?: NullableBoolFieldUpdateOperationsInput | boolean | null
    oldJid?: NullableStringFieldUpdateOperationsInput | string | null
    pHash?: NullableStringFieldUpdateOperationsInput | string | null
    parentGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    participant?: NullableJsonNullValueInput | InputJsonValue
    pinned?: NullableIntFieldUpdateOperationsInput | number | null
    pnJid?: NullableStringFieldUpdateOperationsInput | string | null
    pnhDuplicateLidThread?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readOnly?: NullableBoolFieldUpdateOperationsInput | boolean | null
    shareOwnPn?: NullableBoolFieldUpdateOperationsInput | boolean | null
    support?: NullableBoolFieldUpdateOperationsInput | boolean | null
    suspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tcToken?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    tcTokenSenderTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    tcTokenTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    terminated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    unreadCount?: NullableIntFieldUpdateOperationsInput | number | null
    unreadMentionCount?: NullableIntFieldUpdateOperationsInput | number | null
    wallpaper?: NullableJsonNullValueInput | InputJsonValue
    lastMessageRecvTimestamp?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ChatUncheckedUpdateInput = {
    pkId?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    contactPrimaryIdentityKey?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    conversationTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    disappearingMode?: NullableJsonNullValueInput | InputJsonValue
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    endOfHistoryTransfer?: NullableBoolFieldUpdateOperationsInput | boolean | null
    endOfHistoryTransferType?: NullableIntFieldUpdateOperationsInput | number | null
    ephemeralExpiration?: NullableIntFieldUpdateOperationsInput | number | null
    ephemeralSettingTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    id?: StringFieldUpdateOperationsInput | string
    isDefaultSubgroup?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isParentGroup?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lastMsgTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    lidJid?: NullableStringFieldUpdateOperationsInput | string | null
    markedAsUnread?: NullableBoolFieldUpdateOperationsInput | boolean | null
    mediaVisibility?: NullableIntFieldUpdateOperationsInput | number | null
    messages?: NullableJsonNullValueInput | InputJsonValue
    muteEndTime?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    newJid?: NullableStringFieldUpdateOperationsInput | string | null
    notSpam?: NullableBoolFieldUpdateOperationsInput | boolean | null
    oldJid?: NullableStringFieldUpdateOperationsInput | string | null
    pHash?: NullableStringFieldUpdateOperationsInput | string | null
    parentGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    participant?: NullableJsonNullValueInput | InputJsonValue
    pinned?: NullableIntFieldUpdateOperationsInput | number | null
    pnJid?: NullableStringFieldUpdateOperationsInput | string | null
    pnhDuplicateLidThread?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readOnly?: NullableBoolFieldUpdateOperationsInput | boolean | null
    shareOwnPn?: NullableBoolFieldUpdateOperationsInput | boolean | null
    support?: NullableBoolFieldUpdateOperationsInput | boolean | null
    suspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tcToken?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    tcTokenSenderTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    tcTokenTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    terminated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    unreadCount?: NullableIntFieldUpdateOperationsInput | number | null
    unreadMentionCount?: NullableIntFieldUpdateOperationsInput | number | null
    wallpaper?: NullableJsonNullValueInput | InputJsonValue
    lastMessageRecvTimestamp?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ChatCreateManyInput = {
    pkId?: number
    sessionId: string
    archived?: boolean | null
    contactPrimaryIdentityKey?: Buffer | null
    conversationTimestamp?: bigint | number | null
    createdAt?: bigint | number | null
    createdBy?: string | null
    description?: string | null
    disappearingMode?: NullableJsonNullValueInput | InputJsonValue
    displayName?: string | null
    endOfHistoryTransfer?: boolean | null
    endOfHistoryTransferType?: number | null
    ephemeralExpiration?: number | null
    ephemeralSettingTimestamp?: bigint | number | null
    id: string
    isDefaultSubgroup?: boolean | null
    isParentGroup?: boolean | null
    lastMsgTimestamp?: bigint | number | null
    lidJid?: string | null
    markedAsUnread?: boolean | null
    mediaVisibility?: number | null
    messages?: NullableJsonNullValueInput | InputJsonValue
    muteEndTime?: bigint | number | null
    name?: string | null
    newJid?: string | null
    notSpam?: boolean | null
    oldJid?: string | null
    pHash?: string | null
    parentGroupId?: string | null
    participant?: NullableJsonNullValueInput | InputJsonValue
    pinned?: number | null
    pnJid?: string | null
    pnhDuplicateLidThread?: boolean | null
    readOnly?: boolean | null
    shareOwnPn?: boolean | null
    support?: boolean | null
    suspended?: boolean | null
    tcToken?: Buffer | null
    tcTokenSenderTimestamp?: bigint | number | null
    tcTokenTimestamp?: bigint | number | null
    terminated?: boolean | null
    unreadCount?: number | null
    unreadMentionCount?: number | null
    wallpaper?: NullableJsonNullValueInput | InputJsonValue
    lastMessageRecvTimestamp?: number | null
  }

  export type ChatUpdateManyMutationInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    contactPrimaryIdentityKey?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    conversationTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    disappearingMode?: NullableJsonNullValueInput | InputJsonValue
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    endOfHistoryTransfer?: NullableBoolFieldUpdateOperationsInput | boolean | null
    endOfHistoryTransferType?: NullableIntFieldUpdateOperationsInput | number | null
    ephemeralExpiration?: NullableIntFieldUpdateOperationsInput | number | null
    ephemeralSettingTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    id?: StringFieldUpdateOperationsInput | string
    isDefaultSubgroup?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isParentGroup?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lastMsgTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    lidJid?: NullableStringFieldUpdateOperationsInput | string | null
    markedAsUnread?: NullableBoolFieldUpdateOperationsInput | boolean | null
    mediaVisibility?: NullableIntFieldUpdateOperationsInput | number | null
    messages?: NullableJsonNullValueInput | InputJsonValue
    muteEndTime?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    newJid?: NullableStringFieldUpdateOperationsInput | string | null
    notSpam?: NullableBoolFieldUpdateOperationsInput | boolean | null
    oldJid?: NullableStringFieldUpdateOperationsInput | string | null
    pHash?: NullableStringFieldUpdateOperationsInput | string | null
    parentGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    participant?: NullableJsonNullValueInput | InputJsonValue
    pinned?: NullableIntFieldUpdateOperationsInput | number | null
    pnJid?: NullableStringFieldUpdateOperationsInput | string | null
    pnhDuplicateLidThread?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readOnly?: NullableBoolFieldUpdateOperationsInput | boolean | null
    shareOwnPn?: NullableBoolFieldUpdateOperationsInput | boolean | null
    support?: NullableBoolFieldUpdateOperationsInput | boolean | null
    suspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tcToken?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    tcTokenSenderTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    tcTokenTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    terminated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    unreadCount?: NullableIntFieldUpdateOperationsInput | number | null
    unreadMentionCount?: NullableIntFieldUpdateOperationsInput | number | null
    wallpaper?: NullableJsonNullValueInput | InputJsonValue
    lastMessageRecvTimestamp?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ChatUncheckedUpdateManyInput = {
    pkId?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    contactPrimaryIdentityKey?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    conversationTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    disappearingMode?: NullableJsonNullValueInput | InputJsonValue
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    endOfHistoryTransfer?: NullableBoolFieldUpdateOperationsInput | boolean | null
    endOfHistoryTransferType?: NullableIntFieldUpdateOperationsInput | number | null
    ephemeralExpiration?: NullableIntFieldUpdateOperationsInput | number | null
    ephemeralSettingTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    id?: StringFieldUpdateOperationsInput | string
    isDefaultSubgroup?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isParentGroup?: NullableBoolFieldUpdateOperationsInput | boolean | null
    lastMsgTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    lidJid?: NullableStringFieldUpdateOperationsInput | string | null
    markedAsUnread?: NullableBoolFieldUpdateOperationsInput | boolean | null
    mediaVisibility?: NullableIntFieldUpdateOperationsInput | number | null
    messages?: NullableJsonNullValueInput | InputJsonValue
    muteEndTime?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    newJid?: NullableStringFieldUpdateOperationsInput | string | null
    notSpam?: NullableBoolFieldUpdateOperationsInput | boolean | null
    oldJid?: NullableStringFieldUpdateOperationsInput | string | null
    pHash?: NullableStringFieldUpdateOperationsInput | string | null
    parentGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    participant?: NullableJsonNullValueInput | InputJsonValue
    pinned?: NullableIntFieldUpdateOperationsInput | number | null
    pnJid?: NullableStringFieldUpdateOperationsInput | string | null
    pnhDuplicateLidThread?: NullableBoolFieldUpdateOperationsInput | boolean | null
    readOnly?: NullableBoolFieldUpdateOperationsInput | boolean | null
    shareOwnPn?: NullableBoolFieldUpdateOperationsInput | boolean | null
    support?: NullableBoolFieldUpdateOperationsInput | boolean | null
    suspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tcToken?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    tcTokenSenderTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    tcTokenTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    terminated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    unreadCount?: NullableIntFieldUpdateOperationsInput | number | null
    unreadMentionCount?: NullableIntFieldUpdateOperationsInput | number | null
    wallpaper?: NullableJsonNullValueInput | InputJsonValue
    lastMessageRecvTimestamp?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ContactCreateInput = {
    sessionId: string
    id: string
    name?: string | null
    notify?: string | null
    verifiedName?: string | null
    imgUrl?: string | null
    status?: string | null
  }

  export type ContactUncheckedCreateInput = {
    pkId?: number
    sessionId: string
    id: string
    name?: string | null
    notify?: string | null
    verifiedName?: string | null
    imgUrl?: string | null
    status?: string | null
  }

  export type ContactUpdateInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    notify?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactUncheckedUpdateInput = {
    pkId?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    notify?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactCreateManyInput = {
    pkId?: number
    sessionId: string
    id: string
    name?: string | null
    notify?: string | null
    verifiedName?: string | null
    imgUrl?: string | null
    status?: string | null
  }

  export type ContactUpdateManyMutationInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    notify?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactUncheckedUpdateManyInput = {
    pkId?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    notify?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedName?: NullableStringFieldUpdateOperationsInput | string | null
    imgUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GroupMetadataCreateInput = {
    sessionId: string
    id: string
    owner?: string | null
    subject: string
    subjectOwner?: string | null
    subjectTime?: number | null
    creation?: number | null
    desc?: string | null
    descOwner?: string | null
    descId?: string | null
    restrict?: boolean | null
    announce?: boolean | null
    size?: number | null
    participants: JsonNullValueInput | InputJsonValue
    ephemeralDuration?: number | null
    inviteCode?: string | null
  }

  export type GroupMetadataUncheckedCreateInput = {
    pkId?: number
    sessionId: string
    id: string
    owner?: string | null
    subject: string
    subjectOwner?: string | null
    subjectTime?: number | null
    creation?: number | null
    desc?: string | null
    descOwner?: string | null
    descId?: string | null
    restrict?: boolean | null
    announce?: boolean | null
    size?: number | null
    participants: JsonNullValueInput | InputJsonValue
    ephemeralDuration?: number | null
    inviteCode?: string | null
  }

  export type GroupMetadataUpdateInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    owner?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    subjectOwner?: NullableStringFieldUpdateOperationsInput | string | null
    subjectTime?: NullableIntFieldUpdateOperationsInput | number | null
    creation?: NullableIntFieldUpdateOperationsInput | number | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    descOwner?: NullableStringFieldUpdateOperationsInput | string | null
    descId?: NullableStringFieldUpdateOperationsInput | string | null
    restrict?: NullableBoolFieldUpdateOperationsInput | boolean | null
    announce?: NullableBoolFieldUpdateOperationsInput | boolean | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    participants?: JsonNullValueInput | InputJsonValue
    ephemeralDuration?: NullableIntFieldUpdateOperationsInput | number | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GroupMetadataUncheckedUpdateInput = {
    pkId?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    owner?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    subjectOwner?: NullableStringFieldUpdateOperationsInput | string | null
    subjectTime?: NullableIntFieldUpdateOperationsInput | number | null
    creation?: NullableIntFieldUpdateOperationsInput | number | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    descOwner?: NullableStringFieldUpdateOperationsInput | string | null
    descId?: NullableStringFieldUpdateOperationsInput | string | null
    restrict?: NullableBoolFieldUpdateOperationsInput | boolean | null
    announce?: NullableBoolFieldUpdateOperationsInput | boolean | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    participants?: JsonNullValueInput | InputJsonValue
    ephemeralDuration?: NullableIntFieldUpdateOperationsInput | number | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GroupMetadataCreateManyInput = {
    pkId?: number
    sessionId: string
    id: string
    owner?: string | null
    subject: string
    subjectOwner?: string | null
    subjectTime?: number | null
    creation?: number | null
    desc?: string | null
    descOwner?: string | null
    descId?: string | null
    restrict?: boolean | null
    announce?: boolean | null
    size?: number | null
    participants: JsonNullValueInput | InputJsonValue
    ephemeralDuration?: number | null
    inviteCode?: string | null
  }

  export type GroupMetadataUpdateManyMutationInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    owner?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    subjectOwner?: NullableStringFieldUpdateOperationsInput | string | null
    subjectTime?: NullableIntFieldUpdateOperationsInput | number | null
    creation?: NullableIntFieldUpdateOperationsInput | number | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    descOwner?: NullableStringFieldUpdateOperationsInput | string | null
    descId?: NullableStringFieldUpdateOperationsInput | string | null
    restrict?: NullableBoolFieldUpdateOperationsInput | boolean | null
    announce?: NullableBoolFieldUpdateOperationsInput | boolean | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    participants?: JsonNullValueInput | InputJsonValue
    ephemeralDuration?: NullableIntFieldUpdateOperationsInput | number | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GroupMetadataUncheckedUpdateManyInput = {
    pkId?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    owner?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    subjectOwner?: NullableStringFieldUpdateOperationsInput | string | null
    subjectTime?: NullableIntFieldUpdateOperationsInput | number | null
    creation?: NullableIntFieldUpdateOperationsInput | number | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    descOwner?: NullableStringFieldUpdateOperationsInput | string | null
    descId?: NullableStringFieldUpdateOperationsInput | string | null
    restrict?: NullableBoolFieldUpdateOperationsInput | boolean | null
    announce?: NullableBoolFieldUpdateOperationsInput | boolean | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    participants?: JsonNullValueInput | InputJsonValue
    ephemeralDuration?: NullableIntFieldUpdateOperationsInput | number | null
    inviteCode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageCreateInput = {
    sessionId: string
    remoteJid: string
    id: string
    agentId?: string | null
    bizPrivacyStatus?: number | null
    broadcast?: boolean | null
    clearMedia?: boolean | null
    duration?: number | null
    ephemeralDuration?: number | null
    ephemeralOffToOn?: boolean | null
    ephemeralOutOfSync?: boolean | null
    ephemeralStartTimestamp?: bigint | number | null
    finalLiveLocation?: NullableJsonNullValueInput | InputJsonValue
    futureproofData?: Buffer | null
    ignore?: boolean | null
    keepInChat?: NullableJsonNullValueInput | InputJsonValue
    key: JsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    mediaCiphertextSha256?: Buffer | null
    mediaData?: NullableJsonNullValueInput | InputJsonValue
    message?: NullableJsonNullValueInput | InputJsonValue
    messageC2STimestamp?: bigint | number | null
    messageSecret?: Buffer | null
    messageStubParameters?: NullableJsonNullValueInput | InputJsonValue
    messageStubType?: number | null
    messageTimestamp?: bigint | number | null
    multicast?: boolean | null
    originalSelfAuthorUserJidString?: string | null
    participant?: string | null
    paymentInfo?: NullableJsonNullValueInput | InputJsonValue
    photoChange?: NullableJsonNullValueInput | InputJsonValue
    pollAdditionalMetadata?: NullableJsonNullValueInput | InputJsonValue
    pollUpdates?: NullableJsonNullValueInput | InputJsonValue
    pushName?: string | null
    quotedPaymentInfo?: NullableJsonNullValueInput | InputJsonValue
    quotedStickerData?: NullableJsonNullValueInput | InputJsonValue
    reactions?: NullableJsonNullValueInput | InputJsonValue
    revokeMessageTimestamp?: bigint | number | null
    starred?: boolean | null
    status?: number | null
    statusAlreadyViewed?: boolean | null
    statusPsa?: NullableJsonNullValueInput | InputJsonValue
    urlNumber?: boolean | null
    urlText?: boolean | null
    userReceipt?: NullableJsonNullValueInput | InputJsonValue
    verifiedBizName?: string | null
  }

  export type MessageUncheckedCreateInput = {
    pkId?: number
    sessionId: string
    remoteJid: string
    id: string
    agentId?: string | null
    bizPrivacyStatus?: number | null
    broadcast?: boolean | null
    clearMedia?: boolean | null
    duration?: number | null
    ephemeralDuration?: number | null
    ephemeralOffToOn?: boolean | null
    ephemeralOutOfSync?: boolean | null
    ephemeralStartTimestamp?: bigint | number | null
    finalLiveLocation?: NullableJsonNullValueInput | InputJsonValue
    futureproofData?: Buffer | null
    ignore?: boolean | null
    keepInChat?: NullableJsonNullValueInput | InputJsonValue
    key: JsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    mediaCiphertextSha256?: Buffer | null
    mediaData?: NullableJsonNullValueInput | InputJsonValue
    message?: NullableJsonNullValueInput | InputJsonValue
    messageC2STimestamp?: bigint | number | null
    messageSecret?: Buffer | null
    messageStubParameters?: NullableJsonNullValueInput | InputJsonValue
    messageStubType?: number | null
    messageTimestamp?: bigint | number | null
    multicast?: boolean | null
    originalSelfAuthorUserJidString?: string | null
    participant?: string | null
    paymentInfo?: NullableJsonNullValueInput | InputJsonValue
    photoChange?: NullableJsonNullValueInput | InputJsonValue
    pollAdditionalMetadata?: NullableJsonNullValueInput | InputJsonValue
    pollUpdates?: NullableJsonNullValueInput | InputJsonValue
    pushName?: string | null
    quotedPaymentInfo?: NullableJsonNullValueInput | InputJsonValue
    quotedStickerData?: NullableJsonNullValueInput | InputJsonValue
    reactions?: NullableJsonNullValueInput | InputJsonValue
    revokeMessageTimestamp?: bigint | number | null
    starred?: boolean | null
    status?: number | null
    statusAlreadyViewed?: boolean | null
    statusPsa?: NullableJsonNullValueInput | InputJsonValue
    urlNumber?: boolean | null
    urlText?: boolean | null
    userReceipt?: NullableJsonNullValueInput | InputJsonValue
    verifiedBizName?: string | null
  }

  export type MessageUpdateInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    remoteJid?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    agentId?: NullableStringFieldUpdateOperationsInput | string | null
    bizPrivacyStatus?: NullableIntFieldUpdateOperationsInput | number | null
    broadcast?: NullableBoolFieldUpdateOperationsInput | boolean | null
    clearMedia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    ephemeralDuration?: NullableIntFieldUpdateOperationsInput | number | null
    ephemeralOffToOn?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ephemeralOutOfSync?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ephemeralStartTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    finalLiveLocation?: NullableJsonNullValueInput | InputJsonValue
    futureproofData?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    ignore?: NullableBoolFieldUpdateOperationsInput | boolean | null
    keepInChat?: NullableJsonNullValueInput | InputJsonValue
    key?: JsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    mediaCiphertextSha256?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    mediaData?: NullableJsonNullValueInput | InputJsonValue
    message?: NullableJsonNullValueInput | InputJsonValue
    messageC2STimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    messageSecret?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    messageStubParameters?: NullableJsonNullValueInput | InputJsonValue
    messageStubType?: NullableIntFieldUpdateOperationsInput | number | null
    messageTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    multicast?: NullableBoolFieldUpdateOperationsInput | boolean | null
    originalSelfAuthorUserJidString?: NullableStringFieldUpdateOperationsInput | string | null
    participant?: NullableStringFieldUpdateOperationsInput | string | null
    paymentInfo?: NullableJsonNullValueInput | InputJsonValue
    photoChange?: NullableJsonNullValueInput | InputJsonValue
    pollAdditionalMetadata?: NullableJsonNullValueInput | InputJsonValue
    pollUpdates?: NullableJsonNullValueInput | InputJsonValue
    pushName?: NullableStringFieldUpdateOperationsInput | string | null
    quotedPaymentInfo?: NullableJsonNullValueInput | InputJsonValue
    quotedStickerData?: NullableJsonNullValueInput | InputJsonValue
    reactions?: NullableJsonNullValueInput | InputJsonValue
    revokeMessageTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    starred?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableIntFieldUpdateOperationsInput | number | null
    statusAlreadyViewed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    statusPsa?: NullableJsonNullValueInput | InputJsonValue
    urlNumber?: NullableBoolFieldUpdateOperationsInput | boolean | null
    urlText?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userReceipt?: NullableJsonNullValueInput | InputJsonValue
    verifiedBizName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUncheckedUpdateInput = {
    pkId?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    remoteJid?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    agentId?: NullableStringFieldUpdateOperationsInput | string | null
    bizPrivacyStatus?: NullableIntFieldUpdateOperationsInput | number | null
    broadcast?: NullableBoolFieldUpdateOperationsInput | boolean | null
    clearMedia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    ephemeralDuration?: NullableIntFieldUpdateOperationsInput | number | null
    ephemeralOffToOn?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ephemeralOutOfSync?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ephemeralStartTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    finalLiveLocation?: NullableJsonNullValueInput | InputJsonValue
    futureproofData?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    ignore?: NullableBoolFieldUpdateOperationsInput | boolean | null
    keepInChat?: NullableJsonNullValueInput | InputJsonValue
    key?: JsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    mediaCiphertextSha256?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    mediaData?: NullableJsonNullValueInput | InputJsonValue
    message?: NullableJsonNullValueInput | InputJsonValue
    messageC2STimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    messageSecret?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    messageStubParameters?: NullableJsonNullValueInput | InputJsonValue
    messageStubType?: NullableIntFieldUpdateOperationsInput | number | null
    messageTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    multicast?: NullableBoolFieldUpdateOperationsInput | boolean | null
    originalSelfAuthorUserJidString?: NullableStringFieldUpdateOperationsInput | string | null
    participant?: NullableStringFieldUpdateOperationsInput | string | null
    paymentInfo?: NullableJsonNullValueInput | InputJsonValue
    photoChange?: NullableJsonNullValueInput | InputJsonValue
    pollAdditionalMetadata?: NullableJsonNullValueInput | InputJsonValue
    pollUpdates?: NullableJsonNullValueInput | InputJsonValue
    pushName?: NullableStringFieldUpdateOperationsInput | string | null
    quotedPaymentInfo?: NullableJsonNullValueInput | InputJsonValue
    quotedStickerData?: NullableJsonNullValueInput | InputJsonValue
    reactions?: NullableJsonNullValueInput | InputJsonValue
    revokeMessageTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    starred?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableIntFieldUpdateOperationsInput | number | null
    statusAlreadyViewed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    statusPsa?: NullableJsonNullValueInput | InputJsonValue
    urlNumber?: NullableBoolFieldUpdateOperationsInput | boolean | null
    urlText?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userReceipt?: NullableJsonNullValueInput | InputJsonValue
    verifiedBizName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageCreateManyInput = {
    pkId?: number
    sessionId: string
    remoteJid: string
    id: string
    agentId?: string | null
    bizPrivacyStatus?: number | null
    broadcast?: boolean | null
    clearMedia?: boolean | null
    duration?: number | null
    ephemeralDuration?: number | null
    ephemeralOffToOn?: boolean | null
    ephemeralOutOfSync?: boolean | null
    ephemeralStartTimestamp?: bigint | number | null
    finalLiveLocation?: NullableJsonNullValueInput | InputJsonValue
    futureproofData?: Buffer | null
    ignore?: boolean | null
    keepInChat?: NullableJsonNullValueInput | InputJsonValue
    key: JsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    mediaCiphertextSha256?: Buffer | null
    mediaData?: NullableJsonNullValueInput | InputJsonValue
    message?: NullableJsonNullValueInput | InputJsonValue
    messageC2STimestamp?: bigint | number | null
    messageSecret?: Buffer | null
    messageStubParameters?: NullableJsonNullValueInput | InputJsonValue
    messageStubType?: number | null
    messageTimestamp?: bigint | number | null
    multicast?: boolean | null
    originalSelfAuthorUserJidString?: string | null
    participant?: string | null
    paymentInfo?: NullableJsonNullValueInput | InputJsonValue
    photoChange?: NullableJsonNullValueInput | InputJsonValue
    pollAdditionalMetadata?: NullableJsonNullValueInput | InputJsonValue
    pollUpdates?: NullableJsonNullValueInput | InputJsonValue
    pushName?: string | null
    quotedPaymentInfo?: NullableJsonNullValueInput | InputJsonValue
    quotedStickerData?: NullableJsonNullValueInput | InputJsonValue
    reactions?: NullableJsonNullValueInput | InputJsonValue
    revokeMessageTimestamp?: bigint | number | null
    starred?: boolean | null
    status?: number | null
    statusAlreadyViewed?: boolean | null
    statusPsa?: NullableJsonNullValueInput | InputJsonValue
    urlNumber?: boolean | null
    urlText?: boolean | null
    userReceipt?: NullableJsonNullValueInput | InputJsonValue
    verifiedBizName?: string | null
  }

  export type MessageUpdateManyMutationInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    remoteJid?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    agentId?: NullableStringFieldUpdateOperationsInput | string | null
    bizPrivacyStatus?: NullableIntFieldUpdateOperationsInput | number | null
    broadcast?: NullableBoolFieldUpdateOperationsInput | boolean | null
    clearMedia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    ephemeralDuration?: NullableIntFieldUpdateOperationsInput | number | null
    ephemeralOffToOn?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ephemeralOutOfSync?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ephemeralStartTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    finalLiveLocation?: NullableJsonNullValueInput | InputJsonValue
    futureproofData?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    ignore?: NullableBoolFieldUpdateOperationsInput | boolean | null
    keepInChat?: NullableJsonNullValueInput | InputJsonValue
    key?: JsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    mediaCiphertextSha256?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    mediaData?: NullableJsonNullValueInput | InputJsonValue
    message?: NullableJsonNullValueInput | InputJsonValue
    messageC2STimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    messageSecret?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    messageStubParameters?: NullableJsonNullValueInput | InputJsonValue
    messageStubType?: NullableIntFieldUpdateOperationsInput | number | null
    messageTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    multicast?: NullableBoolFieldUpdateOperationsInput | boolean | null
    originalSelfAuthorUserJidString?: NullableStringFieldUpdateOperationsInput | string | null
    participant?: NullableStringFieldUpdateOperationsInput | string | null
    paymentInfo?: NullableJsonNullValueInput | InputJsonValue
    photoChange?: NullableJsonNullValueInput | InputJsonValue
    pollAdditionalMetadata?: NullableJsonNullValueInput | InputJsonValue
    pollUpdates?: NullableJsonNullValueInput | InputJsonValue
    pushName?: NullableStringFieldUpdateOperationsInput | string | null
    quotedPaymentInfo?: NullableJsonNullValueInput | InputJsonValue
    quotedStickerData?: NullableJsonNullValueInput | InputJsonValue
    reactions?: NullableJsonNullValueInput | InputJsonValue
    revokeMessageTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    starred?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableIntFieldUpdateOperationsInput | number | null
    statusAlreadyViewed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    statusPsa?: NullableJsonNullValueInput | InputJsonValue
    urlNumber?: NullableBoolFieldUpdateOperationsInput | boolean | null
    urlText?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userReceipt?: NullableJsonNullValueInput | InputJsonValue
    verifiedBizName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUncheckedUpdateManyInput = {
    pkId?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    remoteJid?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    agentId?: NullableStringFieldUpdateOperationsInput | string | null
    bizPrivacyStatus?: NullableIntFieldUpdateOperationsInput | number | null
    broadcast?: NullableBoolFieldUpdateOperationsInput | boolean | null
    clearMedia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    ephemeralDuration?: NullableIntFieldUpdateOperationsInput | number | null
    ephemeralOffToOn?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ephemeralOutOfSync?: NullableBoolFieldUpdateOperationsInput | boolean | null
    ephemeralStartTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    finalLiveLocation?: NullableJsonNullValueInput | InputJsonValue
    futureproofData?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    ignore?: NullableBoolFieldUpdateOperationsInput | boolean | null
    keepInChat?: NullableJsonNullValueInput | InputJsonValue
    key?: JsonNullValueInput | InputJsonValue
    labels?: NullableJsonNullValueInput | InputJsonValue
    mediaCiphertextSha256?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    mediaData?: NullableJsonNullValueInput | InputJsonValue
    message?: NullableJsonNullValueInput | InputJsonValue
    messageC2STimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    messageSecret?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    messageStubParameters?: NullableJsonNullValueInput | InputJsonValue
    messageStubType?: NullableIntFieldUpdateOperationsInput | number | null
    messageTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    multicast?: NullableBoolFieldUpdateOperationsInput | boolean | null
    originalSelfAuthorUserJidString?: NullableStringFieldUpdateOperationsInput | string | null
    participant?: NullableStringFieldUpdateOperationsInput | string | null
    paymentInfo?: NullableJsonNullValueInput | InputJsonValue
    photoChange?: NullableJsonNullValueInput | InputJsonValue
    pollAdditionalMetadata?: NullableJsonNullValueInput | InputJsonValue
    pollUpdates?: NullableJsonNullValueInput | InputJsonValue
    pushName?: NullableStringFieldUpdateOperationsInput | string | null
    quotedPaymentInfo?: NullableJsonNullValueInput | InputJsonValue
    quotedStickerData?: NullableJsonNullValueInput | InputJsonValue
    reactions?: NullableJsonNullValueInput | InputJsonValue
    revokeMessageTimestamp?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    starred?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status?: NullableIntFieldUpdateOperationsInput | number | null
    statusAlreadyViewed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    statusPsa?: NullableJsonNullValueInput | InputJsonValue
    urlNumber?: NullableBoolFieldUpdateOperationsInput | boolean | null
    urlText?: NullableBoolFieldUpdateOperationsInput | boolean | null
    userReceipt?: NullableJsonNullValueInput | InputJsonValue
    verifiedBizName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    sessionId: string
    id: string
    data: string
  }

  export type SessionUncheckedCreateInput = {
    pkId?: number
    sessionId: string
    id: string
    data: string
  }

  export type SessionUpdateInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUncheckedUpdateInput = {
    pkId?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateManyInput = {
    pkId?: number
    sessionId: string
    id: string
    data: string
  }

  export type SessionUpdateManyMutationInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUncheckedUpdateManyInput = {
    pkId?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type ChatIncomingCreateInput = {
    id: string
    sessionId: string
    remoteJid: string
    message: string
    pushName?: string | null
    createdAt?: Date | string
  }

  export type ChatIncomingUncheckedCreateInput = {
    pkId?: number
    id: string
    sessionId: string
    remoteJid: string
    message: string
    pushName?: string | null
    createdAt?: Date | string
  }

  export type ChatIncomingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    remoteJid?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    pushName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatIncomingUncheckedUpdateInput = {
    pkId?: IntFieldUpdateOperationsInput | number
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    remoteJid?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    pushName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatIncomingCreateManyInput = {
    pkId?: number
    id: string
    sessionId: string
    remoteJid: string
    message: string
    pushName?: string | null
    createdAt?: Date | string
  }

  export type ChatIncomingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    remoteJid?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    pushName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatIncomingUncheckedUpdateManyInput = {
    pkId?: IntFieldUpdateOperationsInput | number
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    remoteJid?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    pushName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type BytesNullableFilter = {
    equals?: Buffer | null
    in?: Enumerable<Buffer> | Buffer | null
    notIn?: Enumerable<Buffer> | Buffer | null
    not?: NestedBytesNullableFilter | Buffer | null
  }

  export type BigIntNullableFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | bigint | number | null
    notIn?: Enumerable<bigint> | Enumerable<number> | bigint | number | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableFilter | bigint | number | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ChatSessionIdIdCompoundUniqueInput = {
    sessionId: string
    id: string
  }

  export type ChatCountOrderByAggregateInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    archived?: SortOrder
    contactPrimaryIdentityKey?: SortOrder
    conversationTimestamp?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    description?: SortOrder
    disappearingMode?: SortOrder
    displayName?: SortOrder
    endOfHistoryTransfer?: SortOrder
    endOfHistoryTransferType?: SortOrder
    ephemeralExpiration?: SortOrder
    ephemeralSettingTimestamp?: SortOrder
    id?: SortOrder
    isDefaultSubgroup?: SortOrder
    isParentGroup?: SortOrder
    lastMsgTimestamp?: SortOrder
    lidJid?: SortOrder
    markedAsUnread?: SortOrder
    mediaVisibility?: SortOrder
    messages?: SortOrder
    muteEndTime?: SortOrder
    name?: SortOrder
    newJid?: SortOrder
    notSpam?: SortOrder
    oldJid?: SortOrder
    pHash?: SortOrder
    parentGroupId?: SortOrder
    participant?: SortOrder
    pinned?: SortOrder
    pnJid?: SortOrder
    pnhDuplicateLidThread?: SortOrder
    readOnly?: SortOrder
    shareOwnPn?: SortOrder
    support?: SortOrder
    suspended?: SortOrder
    tcToken?: SortOrder
    tcTokenSenderTimestamp?: SortOrder
    tcTokenTimestamp?: SortOrder
    terminated?: SortOrder
    unreadCount?: SortOrder
    unreadMentionCount?: SortOrder
    wallpaper?: SortOrder
    lastMessageRecvTimestamp?: SortOrder
  }

  export type ChatAvgOrderByAggregateInput = {
    pkId?: SortOrder
    conversationTimestamp?: SortOrder
    createdAt?: SortOrder
    endOfHistoryTransferType?: SortOrder
    ephemeralExpiration?: SortOrder
    ephemeralSettingTimestamp?: SortOrder
    lastMsgTimestamp?: SortOrder
    mediaVisibility?: SortOrder
    muteEndTime?: SortOrder
    pinned?: SortOrder
    tcTokenSenderTimestamp?: SortOrder
    tcTokenTimestamp?: SortOrder
    unreadCount?: SortOrder
    unreadMentionCount?: SortOrder
    lastMessageRecvTimestamp?: SortOrder
  }

  export type ChatMaxOrderByAggregateInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    archived?: SortOrder
    contactPrimaryIdentityKey?: SortOrder
    conversationTimestamp?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    description?: SortOrder
    displayName?: SortOrder
    endOfHistoryTransfer?: SortOrder
    endOfHistoryTransferType?: SortOrder
    ephemeralExpiration?: SortOrder
    ephemeralSettingTimestamp?: SortOrder
    id?: SortOrder
    isDefaultSubgroup?: SortOrder
    isParentGroup?: SortOrder
    lastMsgTimestamp?: SortOrder
    lidJid?: SortOrder
    markedAsUnread?: SortOrder
    mediaVisibility?: SortOrder
    muteEndTime?: SortOrder
    name?: SortOrder
    newJid?: SortOrder
    notSpam?: SortOrder
    oldJid?: SortOrder
    pHash?: SortOrder
    parentGroupId?: SortOrder
    pinned?: SortOrder
    pnJid?: SortOrder
    pnhDuplicateLidThread?: SortOrder
    readOnly?: SortOrder
    shareOwnPn?: SortOrder
    support?: SortOrder
    suspended?: SortOrder
    tcToken?: SortOrder
    tcTokenSenderTimestamp?: SortOrder
    tcTokenTimestamp?: SortOrder
    terminated?: SortOrder
    unreadCount?: SortOrder
    unreadMentionCount?: SortOrder
    lastMessageRecvTimestamp?: SortOrder
  }

  export type ChatMinOrderByAggregateInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    archived?: SortOrder
    contactPrimaryIdentityKey?: SortOrder
    conversationTimestamp?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    description?: SortOrder
    displayName?: SortOrder
    endOfHistoryTransfer?: SortOrder
    endOfHistoryTransferType?: SortOrder
    ephemeralExpiration?: SortOrder
    ephemeralSettingTimestamp?: SortOrder
    id?: SortOrder
    isDefaultSubgroup?: SortOrder
    isParentGroup?: SortOrder
    lastMsgTimestamp?: SortOrder
    lidJid?: SortOrder
    markedAsUnread?: SortOrder
    mediaVisibility?: SortOrder
    muteEndTime?: SortOrder
    name?: SortOrder
    newJid?: SortOrder
    notSpam?: SortOrder
    oldJid?: SortOrder
    pHash?: SortOrder
    parentGroupId?: SortOrder
    pinned?: SortOrder
    pnJid?: SortOrder
    pnhDuplicateLidThread?: SortOrder
    readOnly?: SortOrder
    shareOwnPn?: SortOrder
    support?: SortOrder
    suspended?: SortOrder
    tcToken?: SortOrder
    tcTokenSenderTimestamp?: SortOrder
    tcTokenTimestamp?: SortOrder
    terminated?: SortOrder
    unreadCount?: SortOrder
    unreadMentionCount?: SortOrder
    lastMessageRecvTimestamp?: SortOrder
  }

  export type ChatSumOrderByAggregateInput = {
    pkId?: SortOrder
    conversationTimestamp?: SortOrder
    createdAt?: SortOrder
    endOfHistoryTransferType?: SortOrder
    ephemeralExpiration?: SortOrder
    ephemeralSettingTimestamp?: SortOrder
    lastMsgTimestamp?: SortOrder
    mediaVisibility?: SortOrder
    muteEndTime?: SortOrder
    pinned?: SortOrder
    tcTokenSenderTimestamp?: SortOrder
    tcTokenTimestamp?: SortOrder
    unreadCount?: SortOrder
    unreadMentionCount?: SortOrder
    lastMessageRecvTimestamp?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type BytesNullableWithAggregatesFilter = {
    equals?: Buffer | null
    in?: Enumerable<Buffer> | Buffer | null
    notIn?: Enumerable<Buffer> | Buffer | null
    not?: NestedBytesNullableWithAggregatesFilter | Buffer | null
    _count?: NestedIntNullableFilter
    _min?: NestedBytesNullableFilter
    _max?: NestedBytesNullableFilter
  }

  export type BigIntNullableWithAggregatesFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | bigint | number | null
    notIn?: Enumerable<bigint> | Enumerable<number> | bigint | number | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableWithAggregatesFilter | bigint | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedBigIntNullableFilter
    _min?: NestedBigIntNullableFilter
    _max?: NestedBigIntNullableFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type ContactSessionIdIdCompoundUniqueInput = {
    sessionId: string
    id: string
  }

  export type ContactCountOrderByAggregateInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    id?: SortOrder
    name?: SortOrder
    notify?: SortOrder
    verifiedName?: SortOrder
    imgUrl?: SortOrder
    status?: SortOrder
  }

  export type ContactAvgOrderByAggregateInput = {
    pkId?: SortOrder
  }

  export type ContactMaxOrderByAggregateInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    id?: SortOrder
    name?: SortOrder
    notify?: SortOrder
    verifiedName?: SortOrder
    imgUrl?: SortOrder
    status?: SortOrder
  }

  export type ContactMinOrderByAggregateInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    id?: SortOrder
    name?: SortOrder
    notify?: SortOrder
    verifiedName?: SortOrder
    imgUrl?: SortOrder
    status?: SortOrder
  }

  export type ContactSumOrderByAggregateInput = {
    pkId?: SortOrder
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type GroupMetadataSessionIdIdCompoundUniqueInput = {
    sessionId: string
    id: string
  }

  export type GroupMetadataCountOrderByAggregateInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    id?: SortOrder
    owner?: SortOrder
    subject?: SortOrder
    subjectOwner?: SortOrder
    subjectTime?: SortOrder
    creation?: SortOrder
    desc?: SortOrder
    descOwner?: SortOrder
    descId?: SortOrder
    restrict?: SortOrder
    announce?: SortOrder
    size?: SortOrder
    participants?: SortOrder
    ephemeralDuration?: SortOrder
    inviteCode?: SortOrder
  }

  export type GroupMetadataAvgOrderByAggregateInput = {
    pkId?: SortOrder
    subjectTime?: SortOrder
    creation?: SortOrder
    size?: SortOrder
    ephemeralDuration?: SortOrder
  }

  export type GroupMetadataMaxOrderByAggregateInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    id?: SortOrder
    owner?: SortOrder
    subject?: SortOrder
    subjectOwner?: SortOrder
    subjectTime?: SortOrder
    creation?: SortOrder
    desc?: SortOrder
    descOwner?: SortOrder
    descId?: SortOrder
    restrict?: SortOrder
    announce?: SortOrder
    size?: SortOrder
    ephemeralDuration?: SortOrder
    inviteCode?: SortOrder
  }

  export type GroupMetadataMinOrderByAggregateInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    id?: SortOrder
    owner?: SortOrder
    subject?: SortOrder
    subjectOwner?: SortOrder
    subjectTime?: SortOrder
    creation?: SortOrder
    desc?: SortOrder
    descOwner?: SortOrder
    descId?: SortOrder
    restrict?: SortOrder
    announce?: SortOrder
    size?: SortOrder
    ephemeralDuration?: SortOrder
    inviteCode?: SortOrder
  }

  export type GroupMetadataSumOrderByAggregateInput = {
    pkId?: SortOrder
    subjectTime?: SortOrder
    creation?: SortOrder
    size?: SortOrder
    ephemeralDuration?: SortOrder
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type MessageSessionIdRemoteJidIdCompoundUniqueInput = {
    sessionId: string
    remoteJid: string
    id: string
  }

  export type MessageCountOrderByAggregateInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    remoteJid?: SortOrder
    id?: SortOrder
    agentId?: SortOrder
    bizPrivacyStatus?: SortOrder
    broadcast?: SortOrder
    clearMedia?: SortOrder
    duration?: SortOrder
    ephemeralDuration?: SortOrder
    ephemeralOffToOn?: SortOrder
    ephemeralOutOfSync?: SortOrder
    ephemeralStartTimestamp?: SortOrder
    finalLiveLocation?: SortOrder
    futureproofData?: SortOrder
    ignore?: SortOrder
    keepInChat?: SortOrder
    key?: SortOrder
    labels?: SortOrder
    mediaCiphertextSha256?: SortOrder
    mediaData?: SortOrder
    message?: SortOrder
    messageC2STimestamp?: SortOrder
    messageSecret?: SortOrder
    messageStubParameters?: SortOrder
    messageStubType?: SortOrder
    messageTimestamp?: SortOrder
    multicast?: SortOrder
    originalSelfAuthorUserJidString?: SortOrder
    participant?: SortOrder
    paymentInfo?: SortOrder
    photoChange?: SortOrder
    pollAdditionalMetadata?: SortOrder
    pollUpdates?: SortOrder
    pushName?: SortOrder
    quotedPaymentInfo?: SortOrder
    quotedStickerData?: SortOrder
    reactions?: SortOrder
    revokeMessageTimestamp?: SortOrder
    starred?: SortOrder
    status?: SortOrder
    statusAlreadyViewed?: SortOrder
    statusPsa?: SortOrder
    urlNumber?: SortOrder
    urlText?: SortOrder
    userReceipt?: SortOrder
    verifiedBizName?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    pkId?: SortOrder
    bizPrivacyStatus?: SortOrder
    duration?: SortOrder
    ephemeralDuration?: SortOrder
    ephemeralStartTimestamp?: SortOrder
    messageC2STimestamp?: SortOrder
    messageStubType?: SortOrder
    messageTimestamp?: SortOrder
    revokeMessageTimestamp?: SortOrder
    status?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    remoteJid?: SortOrder
    id?: SortOrder
    agentId?: SortOrder
    bizPrivacyStatus?: SortOrder
    broadcast?: SortOrder
    clearMedia?: SortOrder
    duration?: SortOrder
    ephemeralDuration?: SortOrder
    ephemeralOffToOn?: SortOrder
    ephemeralOutOfSync?: SortOrder
    ephemeralStartTimestamp?: SortOrder
    futureproofData?: SortOrder
    ignore?: SortOrder
    mediaCiphertextSha256?: SortOrder
    messageC2STimestamp?: SortOrder
    messageSecret?: SortOrder
    messageStubType?: SortOrder
    messageTimestamp?: SortOrder
    multicast?: SortOrder
    originalSelfAuthorUserJidString?: SortOrder
    participant?: SortOrder
    pushName?: SortOrder
    revokeMessageTimestamp?: SortOrder
    starred?: SortOrder
    status?: SortOrder
    statusAlreadyViewed?: SortOrder
    urlNumber?: SortOrder
    urlText?: SortOrder
    verifiedBizName?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    remoteJid?: SortOrder
    id?: SortOrder
    agentId?: SortOrder
    bizPrivacyStatus?: SortOrder
    broadcast?: SortOrder
    clearMedia?: SortOrder
    duration?: SortOrder
    ephemeralDuration?: SortOrder
    ephemeralOffToOn?: SortOrder
    ephemeralOutOfSync?: SortOrder
    ephemeralStartTimestamp?: SortOrder
    futureproofData?: SortOrder
    ignore?: SortOrder
    mediaCiphertextSha256?: SortOrder
    messageC2STimestamp?: SortOrder
    messageSecret?: SortOrder
    messageStubType?: SortOrder
    messageTimestamp?: SortOrder
    multicast?: SortOrder
    originalSelfAuthorUserJidString?: SortOrder
    participant?: SortOrder
    pushName?: SortOrder
    revokeMessageTimestamp?: SortOrder
    starred?: SortOrder
    status?: SortOrder
    statusAlreadyViewed?: SortOrder
    urlNumber?: SortOrder
    urlText?: SortOrder
    verifiedBizName?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    pkId?: SortOrder
    bizPrivacyStatus?: SortOrder
    duration?: SortOrder
    ephemeralDuration?: SortOrder
    ephemeralStartTimestamp?: SortOrder
    messageC2STimestamp?: SortOrder
    messageStubType?: SortOrder
    messageTimestamp?: SortOrder
    revokeMessageTimestamp?: SortOrder
    status?: SortOrder
  }

  export type SessionSessionIdIdCompoundUniqueInput = {
    sessionId: string
    id: string
  }

  export type SessionCountOrderByAggregateInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    id?: SortOrder
    data?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    pkId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    id?: SortOrder
    data?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    pkId?: SortOrder
    sessionId?: SortOrder
    id?: SortOrder
    data?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    pkId?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ChatIncomingSessionIdRemoteJidIdCompoundUniqueInput = {
    sessionId: string
    remoteJid: string
    id: string
  }

  export type ChatIncomingCountOrderByAggregateInput = {
    pkId?: SortOrder
    id?: SortOrder
    sessionId?: SortOrder
    remoteJid?: SortOrder
    message?: SortOrder
    pushName?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatIncomingAvgOrderByAggregateInput = {
    pkId?: SortOrder
  }

  export type ChatIncomingMaxOrderByAggregateInput = {
    pkId?: SortOrder
    id?: SortOrder
    sessionId?: SortOrder
    remoteJid?: SortOrder
    message?: SortOrder
    pushName?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatIncomingMinOrderByAggregateInput = {
    pkId?: SortOrder
    id?: SortOrder
    sessionId?: SortOrder
    remoteJid?: SortOrder
    message?: SortOrder
    pushName?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatIncomingSumOrderByAggregateInput = {
    pkId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Buffer | null
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedBytesNullableFilter = {
    equals?: Buffer | null
    in?: Enumerable<Buffer> | Buffer | null
    notIn?: Enumerable<Buffer> | Buffer | null
    not?: NestedBytesNullableFilter | Buffer | null
  }

  export type NestedBigIntNullableFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | bigint | number | null
    notIn?: Enumerable<bigint> | Enumerable<number> | bigint | number | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableFilter | bigint | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedBytesNullableWithAggregatesFilter = {
    equals?: Buffer | null
    in?: Enumerable<Buffer> | Buffer | null
    notIn?: Enumerable<Buffer> | Buffer | null
    not?: NestedBytesNullableWithAggregatesFilter | Buffer | null
    _count?: NestedIntNullableFilter
    _min?: NestedBytesNullableFilter
    _max?: NestedBytesNullableFilter
  }

  export type NestedBigIntNullableWithAggregatesFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | bigint | number | null
    notIn?: Enumerable<bigint> | Enumerable<number> | bigint | number | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableWithAggregatesFilter | bigint | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedBigIntNullableFilter
    _min?: NestedBigIntNullableFilter
    _max?: NestedBigIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}